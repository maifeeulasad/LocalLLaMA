import{j as e}from"./index-DLSqWzaI.js";import{R as t}from"./RedditPostRenderer-CysRo2D_.js";import"./index-COXiL3Lo.js";const n=JSON.parse('[{"kind":"Listing","data":{"after":null,"dist":1,"modhash":"","geo_filter":"","children":[{"kind":"t3","data":{"approved_at_utc":null,"subreddit":"LocalLLaMA","selftext":"AutoBE, No-code agent for Backend Application, writing 100% compilable code\\n\\n- **GitHub Repository**: https://github.com/wrtnlabs/autobe\\n- **Guide Documents**: https://wrtnlabs.io/autobe/docs\\n- **Demo Result (Generated backend applications)**\\n  - Bulletin Board System: https://github.com/wrtnlabs/autobe-example-bbs\\n  - E-Commerce System: https://github.com/wrtnlabs/autobe-example-shopping\\n\\n## TL;DR\\n\\n- **What**: AutoBE generates complete, production-ready backend applications from natural language  \\n- **How**: AI + Internal Compilers + Feedback Loops = 100% compilable code  \\n- **Demo**: Created a full economics forum (23 tables, 125 APIs, 253 tests) in 40 minutes  \\n- **Stack**: TypeScript + NestJS + Prisma  \\n- **Status**: Open source, alpha release with 4/5 features complete\\n\\n---\\n\\n## Preface\\n\\nWe are immensely proud to introduce AutoBE, our revolutionary open-source vibe coding agent for backend applications, developed by Wrtn Technologies.\\n\\nAutoBE is an AI-powered no-code agent that solves the fundamental problem every developer faces with AI code generation: broken, incomplete, or non-compilable code. Unlike typical AI coding assistants that generate snippets and hope for the best, AutoBE produces 100% working, production-ready backend applications through a revolutionary compiler-driven approach.\\n\\nThe core innovation lies in AutoBE\'s internal compiler system that validates every piece of generated code in real-time. When the AI makes mistakes, the compiler catches them, provides detailed feedback, and guides the AI to retry until perfect code is achieved.\\n\\n## Playground\\n\\nExperience AutoBE directly in your browser at https://stackblitz.com/github/wrtnlabs/autobe-playground-stackblitz\\n\\n**Demo Example - Creating a Bulletin Board System:**\\n\\nIn the demo video, we demonstrated AutoBE by making this request:\\n\\n&gt; \\"I want to create a current affairs and economics bulletin board, but I don\'t know much about development. So please have the AI handle all the requirements analysis report for me.\\"\\n\\nThe result was impressive: In just forty minutes, AutoBE delivered a complete, enterprise-grade backend application that would typically require months of development work by a team of senior developers.\\n\\n**What AutoBE Generated:**\\n- Requirements Analysis: Comprehensive six-chapter specification document with user roles, feature prioritization, and technical requirements\\n- Database Design: Twenty-three properly normalized tables with foreign key relationships, indexes, and constraints  \\n- API Development: One hundred twenty-five REST endpoints with complete OpenAPI documentation and request/response schemas\\n- Quality Assurance: Two hundred fifty-three end-to-end tests covering every user scenario and edge case\\n- Developer Tools: Type-safe SDK generation for seamless frontend integration\\n\\n## How It Actually Works\\n\\nAutoBE doesn\'t just generate code and hope for the best. Here\'s the magic process:\\n\\n```\\nUser Request → AI Function Calling → AST Generation → Compiler Validation\\n                     ↑                                         ↓\\n                 Retry with feedback ← Error Analysis ← Validation Failed\\n```\\n\\nThe system employs a sophisticated five-step waterfall model that mirrors how senior developers approach complex projects:\\n\\n1. **Requirements Analysis** - Generates detailed project specifications and user roles\\n2. **Database Design** - Creates optimized schemas with proper relationships  \\n3. **API Specification** - Develops complete REST API documentation\\n4. **E2E Test Generation** - Writes comprehensive test suites\\n5. **Main Program Implementation** - Full backend code (coming in beta)\\n\\nCurrently, four of these five steps are fully implemented in the alpha release. The technology stack was carefully chosen for enterprise reliability: TypeScript ensures type safety, NestJS provides scalable server-side architecture, and Prisma offers next-generation database management.\\n\\n**The Compiler Feedback Process**: AutoBE constructs Abstract Syntax Trees (AST) for each component through AI function calling, with dedicated validation for each step:\\n\\n| Step | AST Structure | Validation Logic |\\n|------|---------------|------------------|\\n| **Database Design** | [`AutoBePrisma.IApplication`](https://github.com/wrtnlabs/autobe/blob/main/packages/interface/src/prisma/AutoBePrisma.ts) | [`IAutoBePrismaValidation`](https://github.com/wrtnlabs/autobe/blob/main/packages/interface/src/prisma/IAutoBePrismaValidation.ts) |\\n| **API Specification** | [`AutoBeOpenApi.IDocument`](https://github.com/wrtnlabs/autobe/blob/main/packages/interface/src/openapi/AutoBeOpenApi.ts) | `IValidation` |\\n| **E2E Test Code** | [`AutoBeTest.IFunction`](https://github.com/wrtnlabs/autobe/blob/main/packages/interface/src/test/AutoBeTest.ts) | [`IAutoBeTypeScriptCompileResult`](https://github.com/wrtnlabs/autobe/blob/main/packages/interface/src/compiler/IAutoBeTypeScriptCompileResult.ts) |\\n\\nWhen the AI constructs AST data, internal compilers immediately validate the structure. If validation fails, the system provides detailed error analysis explaining exactly what went wrong and how to fix it. The AI learns from this feedback and retries until achieving perfect results. This approach fundamentally solves the reliability problem that plagues AI-generated code.\\n\\n## Beta Release is Coming\\n\\n**Upcoming Milestones:**\\n- **Beta Release**: August 31, 2025 (complete 5-step process)\\n- **Production Release**: December 1, 2025 (enterprise-ready service)\\n\\nThe beta release will mark a significant milestone by completing the five-step waterfall process with the addition of full main program implementation. This means users will receive not just specifications, database designs, API documentation, and comprehensive tests, but complete, runnable backend applications ready for immediate deployment.\\n\\nThe beta version will generate the entire NestJS application structure including controllers, services, DTOs, guards, interceptors, and middleware. All business logic will be implemented according to the specifications, with proper error handling, validation, authentication, and authorization mechanisms. The generated applications will include production-ready features such as logging, monitoring endpoints, health checks, and comprehensive documentation.\\n\\nAdditionally, the beta release will introduce significant performance optimizations including RAG implementation to reduce token consumption, improved user experience with progress tracking and better error messages, and enhanced compatibility with various deployment environments. The system will also include better requirement refinement tools, allowing users to iteratively improve their applications through conversational feedback.\\n\\nAutoBE represents the first component of Wrtn Technologies\' complete no-code ecosystem, alongside Agentica for AI chatbot creation and AutoView for frontend application generation. The beta release will demonstrate how these tools can work together to create full-stack applications entirely through AI conversation.\\n\\n## Current Limitations\\n\\nAutoBE remains in alpha status with several important limitations:\\n\\n**Requirements Accuracy**: While AutoBE excels at creating perfectly compilable, well-architected code, there\'s no guarantee the generated backend precisely matches user intentions. The AI might create technically excellent features that differ from what users actually wanted.\\n\\n**Token Consumption**: The current implementation lacks RAG optimization, resulting in high token usage. The economics forum demo consumed approximately 10 million tokens (~$30). This represents remarkable value compared to traditional development timelines, but it\'s significantly more expensive than typical AI tools.\\n\\n**Local Model Compatibility**: The system is currently optimized for cloud-based LLMs and hasn\'t been extensively tested with local alternatives. For the LocalLLM community, this represents both a limitation and an opportunity to explore adaptations for models like Code Llama or Deepseek Coder.\\n\\n**User Experience**: As a proof-of-concept implementation, AutoBE prioritizes demonstrating core technical capabilities over polished user experience.\\n\\n---\\n\\n*The open-source foundation means the community can study and build upon these compiler feedback techniques.*","user_reports":[],"saved":false,"mod_reason_title":null,"gilded":0,"clicked":false,"title":"Demo Video of AutoBE, No-code agent for Backend Application, writing 100% compilable code (Open Source)","link_flair_richtext":[{"e":"text","t":"Tutorial | Guide"}],"subreddit_name_prefixed":"r/LocalLLaMA","hidden":false,"pwls":6,"link_flair_css_class":"","downs":0,"thumbnail_height":78,"top_awarded_type":null,"hide_score":true,"name":"t3_1ly02iv","quarantine":false,"link_flair_text_color":"light","upvote_ratio":0.75,"author_flair_background_color":null,"ups":2,"total_awards_received":0,"media_embed":{},"thumbnail_width":140,"author_flair_template_id":null,"is_original_content":false,"author_fullname":"t2_1njlywuqe6","secure_media":{"reddit_video":{"bitrate_kbps":2400,"fallback_url":"https://v.redd.it/9gosk8exzfcf1/DASH_720.mp4?source=fallback","has_audio":true,"height":720,"width":1280,"scrubber_media_url":"https://v.redd.it/9gosk8exzfcf1/DASH_96.mp4","dash_url":"https://v.redd.it/9gosk8exzfcf1/DASHPlaylist.mpd?a=1754920332%2COTk2ZjRjZjJmNzc5YjdlOTlmMjQ0OWRkMzJhNTA4YjBjZGY3MzcyMThjMTRmYjUyMzRkZWNkODllNTQ0YzI3MA%3D%3D&amp;v=1&amp;f=sd","duration":877,"hls_url":"https://v.redd.it/9gosk8exzfcf1/HLSPlaylist.m3u8?a=1754920332%2CY2JkM2M5Nzg3M2RiMjdjNWMxYjMyYmYyOWRjMjI3N2EzMzhlYTBlYjE1ZThiNjYwODZjNWM2ODFhZTQ1ZmQxYg%3D%3D&amp;v=1&amp;f=sd","is_gif":false,"transcoding_status":"completed"}},"is_reddit_media_domain":true,"is_meta":false,"category":null,"secure_media_embed":{},"link_flair_text":"Tutorial | Guide","can_mod_post":false,"score":2,"approved_by":null,"is_created_from_ads_ui":false,"author_premium":false,"thumbnail":"https://external-preview.redd.it/M2hubTNhZXh6ZmNmMZU4z1ns0YguhnSerBikWRx-xW0PkW7LeDZSsrbnGGvR.png?width=140&amp;height=78&amp;crop=140:78,smart&amp;format=jpg&amp;v=enabled&amp;lthumb=true&amp;s=7e4c43d5ca9f020627486473edae0329df76cc5c","edited":false,"author_flair_css_class":null,"author_flair_richtext":[],"gildings":{},"post_hint":"hosted:video","content_categories":null,"is_self":false,"subreddit_type":"public","created":1752325721,"link_flair_type":"richtext","wls":6,"removed_by_category":null,"banned_by":null,"author_flair_type":"text","domain":"v.redd.it","allow_live_comments":false,"selftext_html":"&lt;!-- SC_OFF --&gt;&lt;div class=\\"md\\"&gt;&lt;p&gt;AutoBE, No-code agent for Backend Application, writing 100% compilable code&lt;/p&gt;\\n\\n&lt;ul&gt;\\n&lt;li&gt;&lt;strong&gt;GitHub Repository&lt;/strong&gt;: &lt;a href=\\"https://github.com/wrtnlabs/autobe\\"&gt;https://github.com/wrtnlabs/autobe&lt;/a&gt;&lt;/li&gt;\\n&lt;li&gt;&lt;strong&gt;Guide Documents&lt;/strong&gt;: &lt;a href=\\"https://wrtnlabs.io/autobe/docs\\"&gt;https://wrtnlabs.io/autobe/docs&lt;/a&gt;&lt;/li&gt;\\n&lt;li&gt;&lt;strong&gt;Demo Result (Generated backend applications)&lt;/strong&gt;\\n\\n&lt;ul&gt;\\n&lt;li&gt;Bulletin Board System: &lt;a href=\\"https://github.com/wrtnlabs/autobe-example-bbs\\"&gt;https://github.com/wrtnlabs/autobe-example-bbs&lt;/a&gt;&lt;/li&gt;\\n&lt;li&gt;E-Commerce System: &lt;a href=\\"https://github.com/wrtnlabs/autobe-example-shopping\\"&gt;https://github.com/wrtnlabs/autobe-example-shopping&lt;/a&gt;&lt;/li&gt;\\n&lt;/ul&gt;&lt;/li&gt;\\n&lt;/ul&gt;\\n\\n&lt;h2&gt;TL;DR&lt;/h2&gt;\\n\\n&lt;ul&gt;\\n&lt;li&gt;&lt;strong&gt;What&lt;/strong&gt;: AutoBE generates complete, production-ready backend applications from natural language&lt;br/&gt;&lt;/li&gt;\\n&lt;li&gt;&lt;strong&gt;How&lt;/strong&gt;: AI + Internal Compilers + Feedback Loops = 100% compilable code&lt;br/&gt;&lt;/li&gt;\\n&lt;li&gt;&lt;strong&gt;Demo&lt;/strong&gt;: Created a full economics forum (23 tables, 125 APIs, 253 tests) in 40 minutes&lt;br/&gt;&lt;/li&gt;\\n&lt;li&gt;&lt;strong&gt;Stack&lt;/strong&gt;: TypeScript + NestJS + Prisma&lt;br/&gt;&lt;/li&gt;\\n&lt;li&gt;&lt;strong&gt;Status&lt;/strong&gt;: Open source, alpha release with 4/5 features complete&lt;/li&gt;\\n&lt;/ul&gt;\\n\\n&lt;hr/&gt;\\n\\n&lt;h2&gt;Preface&lt;/h2&gt;\\n\\n&lt;p&gt;We are immensely proud to introduce AutoBE, our revolutionary open-source vibe coding agent for backend applications, developed by Wrtn Technologies.&lt;/p&gt;\\n\\n&lt;p&gt;AutoBE is an AI-powered no-code agent that solves the fundamental problem every developer faces with AI code generation: broken, incomplete, or non-compilable code. Unlike typical AI coding assistants that generate snippets and hope for the best, AutoBE produces 100% working, production-ready backend applications through a revolutionary compiler-driven approach.&lt;/p&gt;\\n\\n&lt;p&gt;The core innovation lies in AutoBE&amp;#39;s internal compiler system that validates every piece of generated code in real-time. When the AI makes mistakes, the compiler catches them, provides detailed feedback, and guides the AI to retry until perfect code is achieved.&lt;/p&gt;\\n\\n&lt;h2&gt;Playground&lt;/h2&gt;\\n\\n&lt;p&gt;Experience AutoBE directly in your browser at &lt;a href=\\"https://stackblitz.com/github/wrtnlabs/autobe-playground-stackblitz\\"&gt;https://stackblitz.com/github/wrtnlabs/autobe-playground-stackblitz&lt;/a&gt;&lt;/p&gt;\\n\\n&lt;p&gt;&lt;strong&gt;Demo Example - Creating a Bulletin Board System:&lt;/strong&gt;&lt;/p&gt;\\n\\n&lt;p&gt;In the demo video, we demonstrated AutoBE by making this request:&lt;/p&gt;\\n\\n&lt;blockquote&gt;\\n&lt;p&gt;&amp;quot;I want to create a current affairs and economics bulletin board, but I don&amp;#39;t know much about development. So please have the AI handle all the requirements analysis report for me.&amp;quot;&lt;/p&gt;\\n&lt;/blockquote&gt;\\n\\n&lt;p&gt;The result was impressive: In just forty minutes, AutoBE delivered a complete, enterprise-grade backend application that would typically require months of development work by a team of senior developers.&lt;/p&gt;\\n\\n&lt;p&gt;&lt;strong&gt;What AutoBE Generated:&lt;/strong&gt;\\n- Requirements Analysis: Comprehensive six-chapter specification document with user roles, feature prioritization, and technical requirements\\n- Database Design: Twenty-three properly normalized tables with foreign key relationships, indexes, and constraints&lt;br/&gt;\\n- API Development: One hundred twenty-five REST endpoints with complete OpenAPI documentation and request/response schemas\\n- Quality Assurance: Two hundred fifty-three end-to-end tests covering every user scenario and edge case\\n- Developer Tools: Type-safe SDK generation for seamless frontend integration&lt;/p&gt;\\n\\n&lt;h2&gt;How It Actually Works&lt;/h2&gt;\\n\\n&lt;p&gt;AutoBE doesn&amp;#39;t just generate code and hope for the best. Here&amp;#39;s the magic process:&lt;/p&gt;\\n\\n&lt;p&gt;&lt;code&gt;\\nUser Request → AI Function Calling → AST Generation → Compiler Validation\\n                     ↑                                         ↓\\n                 Retry with feedback ← Error Analysis ← Validation Failed\\n&lt;/code&gt;&lt;/p&gt;\\n\\n&lt;p&gt;The system employs a sophisticated five-step waterfall model that mirrors how senior developers approach complex projects:&lt;/p&gt;\\n\\n&lt;ol&gt;\\n&lt;li&gt;&lt;strong&gt;Requirements Analysis&lt;/strong&gt; - Generates detailed project specifications and user roles&lt;/li&gt;\\n&lt;li&gt;&lt;strong&gt;Database Design&lt;/strong&gt; - Creates optimized schemas with proper relationships&lt;br/&gt;&lt;/li&gt;\\n&lt;li&gt;&lt;strong&gt;API Specification&lt;/strong&gt; - Develops complete REST API documentation&lt;/li&gt;\\n&lt;li&gt;&lt;strong&gt;E2E Test Generation&lt;/strong&gt; - Writes comprehensive test suites&lt;/li&gt;\\n&lt;li&gt;&lt;strong&gt;Main Program Implementation&lt;/strong&gt; - Full backend code (coming in beta)&lt;/li&gt;\\n&lt;/ol&gt;\\n\\n&lt;p&gt;Currently, four of these five steps are fully implemented in the alpha release. The technology stack was carefully chosen for enterprise reliability: TypeScript ensures type safety, NestJS provides scalable server-side architecture, and Prisma offers next-generation database management.&lt;/p&gt;\\n\\n&lt;p&gt;&lt;strong&gt;The Compiler Feedback Process&lt;/strong&gt;: AutoBE constructs Abstract Syntax Trees (AST) for each component through AI function calling, with dedicated validation for each step:&lt;/p&gt;\\n\\n&lt;table&gt;&lt;thead&gt;\\n&lt;tr&gt;\\n&lt;th&gt;Step&lt;/th&gt;\\n&lt;th&gt;AST Structure&lt;/th&gt;\\n&lt;th&gt;Validation Logic&lt;/th&gt;\\n&lt;/tr&gt;\\n&lt;/thead&gt;&lt;tbody&gt;\\n&lt;tr&gt;\\n&lt;td&gt;&lt;strong&gt;Database Design&lt;/strong&gt;&lt;/td&gt;\\n&lt;td&gt;&lt;a href=\\"https://github.com/wrtnlabs/autobe/blob/main/packages/interface/src/prisma/AutoBePrisma.ts\\"&gt;&lt;code&gt;AutoBePrisma.IApplication&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;\\n&lt;td&gt;&lt;a href=\\"https://github.com/wrtnlabs/autobe/blob/main/packages/interface/src/prisma/IAutoBePrismaValidation.ts\\"&gt;&lt;code&gt;IAutoBePrismaValidation&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;\\n&lt;/tr&gt;\\n&lt;tr&gt;\\n&lt;td&gt;&lt;strong&gt;API Specification&lt;/strong&gt;&lt;/td&gt;\\n&lt;td&gt;&lt;a href=\\"https://github.com/wrtnlabs/autobe/blob/main/packages/interface/src/openapi/AutoBeOpenApi.ts\\"&gt;&lt;code&gt;AutoBeOpenApi.IDocument&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;\\n&lt;td&gt;&lt;code&gt;IValidation&lt;/code&gt;&lt;/td&gt;\\n&lt;/tr&gt;\\n&lt;tr&gt;\\n&lt;td&gt;&lt;strong&gt;E2E Test Code&lt;/strong&gt;&lt;/td&gt;\\n&lt;td&gt;&lt;a href=\\"https://github.com/wrtnlabs/autobe/blob/main/packages/interface/src/test/AutoBeTest.ts\\"&gt;&lt;code&gt;AutoBeTest.IFunction&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;\\n&lt;td&gt;&lt;a href=\\"https://github.com/wrtnlabs/autobe/blob/main/packages/interface/src/compiler/IAutoBeTypeScriptCompileResult.ts\\"&gt;&lt;code&gt;IAutoBeTypeScriptCompileResult&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;\\n&lt;/tr&gt;\\n&lt;/tbody&gt;&lt;/table&gt;\\n\\n&lt;p&gt;When the AI constructs AST data, internal compilers immediately validate the structure. If validation fails, the system provides detailed error analysis explaining exactly what went wrong and how to fix it. The AI learns from this feedback and retries until achieving perfect results. This approach fundamentally solves the reliability problem that plagues AI-generated code.&lt;/p&gt;\\n\\n&lt;h2&gt;Beta Release is Coming&lt;/h2&gt;\\n\\n&lt;p&gt;&lt;strong&gt;Upcoming Milestones:&lt;/strong&gt;\\n- &lt;strong&gt;Beta Release&lt;/strong&gt;: August 31, 2025 (complete 5-step process)\\n- &lt;strong&gt;Production Release&lt;/strong&gt;: December 1, 2025 (enterprise-ready service)&lt;/p&gt;\\n\\n&lt;p&gt;The beta release will mark a significant milestone by completing the five-step waterfall process with the addition of full main program implementation. This means users will receive not just specifications, database designs, API documentation, and comprehensive tests, but complete, runnable backend applications ready for immediate deployment.&lt;/p&gt;\\n\\n&lt;p&gt;The beta version will generate the entire NestJS application structure including controllers, services, DTOs, guards, interceptors, and middleware. All business logic will be implemented according to the specifications, with proper error handling, validation, authentication, and authorization mechanisms. The generated applications will include production-ready features such as logging, monitoring endpoints, health checks, and comprehensive documentation.&lt;/p&gt;\\n\\n&lt;p&gt;Additionally, the beta release will introduce significant performance optimizations including RAG implementation to reduce token consumption, improved user experience with progress tracking and better error messages, and enhanced compatibility with various deployment environments. The system will also include better requirement refinement tools, allowing users to iteratively improve their applications through conversational feedback.&lt;/p&gt;\\n\\n&lt;p&gt;AutoBE represents the first component of Wrtn Technologies&amp;#39; complete no-code ecosystem, alongside Agentica for AI chatbot creation and AutoView for frontend application generation. The beta release will demonstrate how these tools can work together to create full-stack applications entirely through AI conversation.&lt;/p&gt;\\n\\n&lt;h2&gt;Current Limitations&lt;/h2&gt;\\n\\n&lt;p&gt;AutoBE remains in alpha status with several important limitations:&lt;/p&gt;\\n\\n&lt;p&gt;&lt;strong&gt;Requirements Accuracy&lt;/strong&gt;: While AutoBE excels at creating perfectly compilable, well-architected code, there&amp;#39;s no guarantee the generated backend precisely matches user intentions. The AI might create technically excellent features that differ from what users actually wanted.&lt;/p&gt;\\n\\n&lt;p&gt;&lt;strong&gt;Token Consumption&lt;/strong&gt;: The current implementation lacks RAG optimization, resulting in high token usage. The economics forum demo consumed approximately 10 million tokens (~$30). This represents remarkable value compared to traditional development timelines, but it&amp;#39;s significantly more expensive than typical AI tools.&lt;/p&gt;\\n\\n&lt;p&gt;&lt;strong&gt;Local Model Compatibility&lt;/strong&gt;: The system is currently optimized for cloud-based LLMs and hasn&amp;#39;t been extensively tested with local alternatives. For the LocalLLM community, this represents both a limitation and an opportunity to explore adaptations for models like Code Llama or Deepseek Coder.&lt;/p&gt;\\n\\n&lt;p&gt;&lt;strong&gt;User Experience&lt;/strong&gt;: As a proof-of-concept implementation, AutoBE prioritizes demonstrating core technical capabilities over polished user experience.&lt;/p&gt;\\n\\n&lt;hr/&gt;\\n\\n&lt;p&gt;&lt;em&gt;The open-source foundation means the community can study and build upon these compiler feedback techniques.&lt;/em&gt;&lt;/p&gt;\\n&lt;/div&gt;&lt;!-- SC_ON --&gt;","likes":null,"suggested_sort":null,"banned_at_utc":null,"url_overridden_by_dest":"https://v.redd.it/9gosk8exzfcf1","view_count":null,"archived":false,"no_follow":false,"is_crosspostable":false,"pinned":false,"over_18":false,"preview":{"images":[{"source":{"url":"https://external-preview.redd.it/M2hubTNhZXh6ZmNmMZU4z1ns0YguhnSerBikWRx-xW0PkW7LeDZSsrbnGGvR.png?format=pjpg&amp;auto=webp&amp;s=5aee3b56329ccdce57b855ce5e674be7ba29d0e4","width":1280,"height":720},"resolutions":[{"url":"https://external-preview.redd.it/M2hubTNhZXh6ZmNmMZU4z1ns0YguhnSerBikWRx-xW0PkW7LeDZSsrbnGGvR.png?width=108&amp;crop=smart&amp;format=pjpg&amp;auto=webp&amp;s=d82cc46bf358c864562777e3dceeb44bb1f17fa8","width":108,"height":60},{"url":"https://external-preview.redd.it/M2hubTNhZXh6ZmNmMZU4z1ns0YguhnSerBikWRx-xW0PkW7LeDZSsrbnGGvR.png?width=216&amp;crop=smart&amp;format=pjpg&amp;auto=webp&amp;s=0805dcabd297c7668aa3b9289b2cd02f314bee3b","width":216,"height":121},{"url":"https://external-preview.redd.it/M2hubTNhZXh6ZmNmMZU4z1ns0YguhnSerBikWRx-xW0PkW7LeDZSsrbnGGvR.png?width=320&amp;crop=smart&amp;format=pjpg&amp;auto=webp&amp;s=3a8336fedfe08c929803103e3b39a4a60284d8c1","width":320,"height":180},{"url":"https://external-preview.redd.it/M2hubTNhZXh6ZmNmMZU4z1ns0YguhnSerBikWRx-xW0PkW7LeDZSsrbnGGvR.png?width=640&amp;crop=smart&amp;format=pjpg&amp;auto=webp&amp;s=099550aa19bf7b86b4f88924b31f5b225307ad25","width":640,"height":360},{"url":"https://external-preview.redd.it/M2hubTNhZXh6ZmNmMZU4z1ns0YguhnSerBikWRx-xW0PkW7LeDZSsrbnGGvR.png?width=960&amp;crop=smart&amp;format=pjpg&amp;auto=webp&amp;s=936e96f71f6befb8114947783cee527748837943","width":960,"height":540},{"url":"https://external-preview.redd.it/M2hubTNhZXh6ZmNmMZU4z1ns0YguhnSerBikWRx-xW0PkW7LeDZSsrbnGGvR.png?width=1080&amp;crop=smart&amp;format=pjpg&amp;auto=webp&amp;s=1b6c2d61599805ae5e13c65f38249d6c540c6055","width":1080,"height":607}],"variants":{},"id":"M2hubTNhZXh6ZmNmMZU4z1ns0YguhnSerBikWRx-xW0PkW7LeDZSsrbnGGvR"}],"enabled":false},"all_awardings":[],"awarders":[],"media_only":false,"link_flair_template_id":"449b05a6-bf8e-11ed-b4bd-66961e47bd50","can_gild":false,"spoiler":false,"locked":false,"author_flair_text":null,"treatment_tags":[],"visited":false,"removed_by":null,"mod_note":null,"distinguished":null,"subreddit_id":"t5_81eyvm","author_is_blocked":false,"mod_reason_by":null,"num_reports":null,"removal_reason":null,"link_flair_background_color":"#0079d3","id":"1ly02iv","is_robot_indexable":true,"num_duplicates":0,"report_reasons":null,"author":"jhnam88","discussion_type":null,"num_comments":1,"send_replies":true,"media":{"reddit_video":{"bitrate_kbps":2400,"fallback_url":"https://v.redd.it/9gosk8exzfcf1/DASH_720.mp4?source=fallback","has_audio":true,"height":720,"width":1280,"scrubber_media_url":"https://v.redd.it/9gosk8exzfcf1/DASH_96.mp4","dash_url":"https://v.redd.it/9gosk8exzfcf1/DASHPlaylist.mpd?a=1754920332%2COTk2ZjRjZjJmNzc5YjdlOTlmMjQ0OWRkMzJhNTA4YjBjZGY3MzcyMThjMTRmYjUyMzRkZWNkODllNTQ0YzI3MA%3D%3D&amp;v=1&amp;f=sd","duration":877,"hls_url":"https://v.redd.it/9gosk8exzfcf1/HLSPlaylist.m3u8?a=1754920332%2CY2JkM2M5Nzg3M2RiMjdjNWMxYjMyYmYyOWRjMjI3N2EzMzhlYTBlYjE1ZThiNjYwODZjNWM2ODFhZTQ1ZmQxYg%3D%3D&amp;v=1&amp;f=sd","is_gif":false,"transcoding_status":"completed"}},"contest_mode":false,"author_patreon_flair":false,"author_flair_text_color":null,"permalink":"/r/LocalLLaMA/comments/1ly02iv/demo_video_of_autobe_nocode_agent_for_backend/","stickied":false,"url":"https://v.redd.it/9gosk8exzfcf1","subreddit_subscribers":497824,"created_utc":1752325721,"num_crossposts":0,"mod_reports":[],"is_video":true}}],"before":null}},{"kind":"Listing","data":{"after":null,"dist":null,"modhash":"","geo_filter":"","children":[{"kind":"t1","data":{"subreddit_id":"t5_81eyvm","approved_at_utc":null,"author_is_blocked":false,"comment_type":null,"awarders":[],"mod_reason_by":null,"banned_by":null,"author_flair_type":"text","total_awards_received":0,"subreddit":"LocalLLaMA","author_flair_template_id":null,"likes":null,"replies":"","user_reports":[],"saved":false,"id":"n2q1l49","banned_at_utc":null,"mod_reason_title":null,"gilded":0,"archived":false,"collapsed_reason_code":null,"no_follow":true,"author":"jhnam88","can_mod_post":false,"created_utc":1752326086,"send_replies":true,"parent_id":"t3_1ly02iv","score":2,"author_fullname":"t2_1njlywuqe6","approved_by":null,"mod_note":null,"all_awardings":[],"collapsed":false,"body":"Sorry the video is so fast. I didn\'t realize there was a 15 minute limit on Reddit video uploads. Here\'s a video in normal speed: [https://youtu.be/6Pio2tp5QMU](https://youtu.be/6Pio2tp5QMU)","edited":false,"top_awarded_type":null,"author_flair_css_class":null,"name":"t1_n2q1l49","is_submitter":true,"downs":0,"author_flair_richtext":[],"author_patreon_flair":false,"body_html":"&lt;div class=\\"md\\"&gt;&lt;p&gt;Sorry the video is so fast. I didn&amp;#39;t realize there was a 15 minute limit on Reddit video uploads. Here&amp;#39;s a video in normal speed: &lt;a href=\\"https://youtu.be/6Pio2tp5QMU\\"&gt;https://youtu.be/6Pio2tp5QMU&lt;/a&gt;&lt;/p&gt;\\n&lt;/div&gt;","removal_reason":null,"collapsed_reason":null,"distinguished":null,"associated_award":null,"stickied":false,"author_premium":false,"can_gild":false,"gildings":{},"unrepliable_reason":null,"author_flair_text_color":null,"score_hidden":false,"permalink":"/r/LocalLLaMA/comments/1ly02iv/demo_video_of_autobe_nocode_agent_for_backend/n2q1l49/","subreddit_type":"public","locked":false,"report_reasons":null,"created":1752326086,"author_flair_text":null,"treatment_tags":[],"link_id":"t3_1ly02iv","subreddit_name_prefixed":"r/LocalLLaMA","controversiality":0,"depth":0,"author_flair_background_color":null,"collapsed_because_crowd_control":null,"mod_reports":[],"num_reports":null,"ups":2}}],"before":null}}]'),l=()=>e.jsx(t,{data:n});export{l as default};

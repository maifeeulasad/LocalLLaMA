import{j as t}from"./index-Cd3v0jxz.js";import{R as e}from"./RedditPostRenderer-cI96YLhy.js";import"./index-DGBoKyQm.js";const a=JSON.parse('[{"kind":"Listing","data":{"after":null,"dist":1,"modhash":"","geo_filter":"","children":[{"kind":"t3","data":{"approved_at_utc":null,"subreddit":"LocalLLaMA","selftext":"Not affiliated with the project, this is my unbiased opinion.\\n\\nI wanted to learn more about LLM function calling, so I prototyped an RPG agent which keeps track of the game state. For example, when new character is introduced, agent calls add\\\\_character tool, which fleshes out the character by filling out a character model. Why post this here? Naturally, I want to see how far one can get with local models for this sort of thing.\\n\\nI tested other libraries before (LangChain, LlamaIndex, Haystack, ...), which are bloated, require a lot of boilerplate code and/or use hidden global state, are poorly designed, and poorly documented. Not so PydanticAI, which uses a lot of clever ideas to avoid the boilerplate, and the documentation is superb.\\n\\nMaking an agent that can keep track of characters in the story is as simple as this:\\n\\n```py\\n    class Character(BaseModel):\\n        \\"\\"\\"Character model with stats and description.\\"\\"\\"\\n    \\n        name: str\\n        appearance: str = Field(description=\\"Physical appearance and decorative clothing\\")\\n        personality: str = Field(description=\\"Personality traits and behavior\\")\\n        money: int = Field(ge=0, description=\\"Amount of money the character carries\\")\\n    \\n        # skipping other attributes...\\n    \\n    agent = Agent(...)\\n    \\n    # dictionary of all characters in the story\\n    npcs = {}\\n    \\n    # This automatically generates a tool signature that the LLM understands\\n    u/agent.tool_plain \\n    def add_character(\\n        character: Character\\n    ) -&gt; str:\\n        \\"\\"\\"\\n        Add a new character to the story.\\n    \\n        Use this tool for every new named character in the story.\\n        \\"\\"\\"\\n        if character.name in state_manager.state.npcs:\\n            return f\\"Character {character.name!r} already exists in the story.\\"\\n    \\n        npcs[character.name] = character\\n    \\n        return f\\"Added character {character.name!r} to the story.\\"\\n\\nNote how you don\'t have to repeat all the Character attributes in the function call, which makes this super flexible. Need a new character attribute? Just add to the Character model in a single place.\\n\\nPydanticAI is the first of these libraries that is actually enjoyable to use.\\n\\nI use Mistral Small 3.2 in my tests and it doesn\'t work consistently - which is probably an issue with the model and not with PydanticAI -, but when it works, it feels like magic.","user_reports":[],"saved":false,"mod_reason_title":null,"gilded":0,"clicked":false,"title":"PydanticAI is GOAT for building agents in Python","link_flair_richtext":[{"e":"text","t":"Resources"}],"subreddit_name_prefixed":"r/LocalLLaMA","hidden":false,"pwls":6,"link_flair_css_class":"","downs":0,"thumbnail_height":73,"top_awarded_type":null,"hide_score":false,"name":"t3_1m0cdle","quarantine":false,"link_flair_text_color":"light","upvote_ratio":0.67,"author_flair_background_color":null,"ups":5,"total_awards_received":0,"media_embed":{},"thumbnail_width":140,"author_flair_template_id":null,"is_original_content":false,"author_fullname":"t2_16rvbe","secure_media":null,"is_reddit_media_domain":false,"is_meta":false,"category":null,"secure_media_embed":{},"link_flair_text":"Resources","can_mod_post":false,"score":5,"approved_by":null,"is_created_from_ads_ui":false,"author_premium":false,"thumbnail":"https://external-preview.redd.it/Y0b6uSvivyxJ1gtFUqHsF1R1w9WCBZmdRTVGYoAvPj0.png?width=140&amp;height=73&amp;crop=140:73,smart&amp;auto=webp&amp;s=36fab7412f33958aa709272a3b83c78d2d4379e3","edited":false,"author_flair_css_class":null,"author_flair_richtext":[],"gildings":{},"post_hint":"link","content_categories":null,"is_self":false,"subreddit_type":"public","created":1752568312,"link_flair_type":"richtext","wls":6,"removed_by_category":null,"banned_by":null,"author_flair_type":"text","domain":"ai.pydantic.dev","allow_live_comments":false,"selftext_html":"&lt;!-- SC_OFF --&gt;&lt;div class=\\"md\\"&gt;&lt;p&gt;Not affiliated with the project, this is my unbiased opinion.&lt;/p&gt;\\n\\n&lt;p&gt;I wanted to learn more about LLM function calling, so I prototyped an RPG agent which keeps track of the game state. For example, when new character is introduced, agent calls add_character tool, which fleshes out the character by filling out a character model. Why post this here? Naturally, I want to see how far one can get with local models for this sort of thing.&lt;/p&gt;\\n\\n&lt;p&gt;I tested other libraries before (LangChain, LlamaIndex, Haystack, ...), which are bloated, require a lot of boilerplate code and/or use hidden global state, are poorly designed, and poorly documented. Not so PydanticAI, which uses a lot of clever ideas to avoid the boilerplate, and the documentation is superb.&lt;/p&gt;\\n\\n&lt;p&gt;Making an agent that can keep track of characters in the story is as simple as this:&lt;/p&gt;\\n\\n&lt;p&gt;```py\\n    class Character(BaseModel):\\n        &amp;quot;&amp;quot;&amp;quot;Character model with stats and description.&amp;quot;&amp;quot;&amp;quot;&lt;/p&gt;\\n\\n&lt;pre&gt;&lt;code&gt;    name: str\\n    appearance: str = Field(description=&amp;quot;Physical appearance and decorative clothing&amp;quot;)\\n    personality: str = Field(description=&amp;quot;Personality traits and behavior&amp;quot;)\\n    money: int = Field(ge=0, description=&amp;quot;Amount of money the character carries&amp;quot;)\\n\\n    # skipping other attributes...\\n\\nagent = Agent(...)\\n\\n# dictionary of all characters in the story\\nnpcs = {}\\n\\n# This automatically generates a tool signature that the LLM understands\\nu/agent.tool_plain \\ndef add_character(\\n    character: Character\\n) -&amp;gt; str:\\n    &amp;quot;&amp;quot;&amp;quot;\\n    Add a new character to the story.\\n\\n    Use this tool for every new named character in the story.\\n    &amp;quot;&amp;quot;&amp;quot;\\n    if character.name in state_manager.state.npcs:\\n        return f&amp;quot;Character {character.name!r} already exists in the story.&amp;quot;\\n\\n    npcs[character.name] = character\\n\\n    return f&amp;quot;Added character {character.name!r} to the story.&amp;quot;\\n&lt;/code&gt;&lt;/pre&gt;\\n\\n&lt;p&gt;Note how you don&amp;#39;t have to repeat all the Character attributes in the function call, which makes this super flexible. Need a new character attribute? Just add to the Character model in a single place.&lt;/p&gt;\\n\\n&lt;p&gt;PydanticAI is the first of these libraries that is actually enjoyable to use.&lt;/p&gt;\\n\\n&lt;p&gt;I use Mistral Small 3.2 in my tests and it doesn&amp;#39;t work consistently - which is probably an issue with the model and not with PydanticAI -, but when it works, it feels like magic.&lt;/p&gt;\\n&lt;/div&gt;&lt;!-- SC_ON --&gt;","likes":null,"suggested_sort":null,"banned_at_utc":null,"url_overridden_by_dest":"https://ai.pydantic.dev/","view_count":null,"archived":false,"no_follow":false,"is_crosspostable":false,"pinned":false,"over_18":false,"preview":{"images":[{"source":{"url":"https://external-preview.redd.it/Y0b6uSvivyxJ1gtFUqHsF1R1w9WCBZmdRTVGYoAvPj0.png?auto=webp&amp;s=a643afbbcfdc774370799a0172b9534a973b608e","width":1200,"height":630},"resolutions":[{"url":"https://external-preview.redd.it/Y0b6uSvivyxJ1gtFUqHsF1R1w9WCBZmdRTVGYoAvPj0.png?width=108&amp;crop=smart&amp;auto=webp&amp;s=88392b566033d09c2d33a1b015aa01b6b7de2b82","width":108,"height":56},{"url":"https://external-preview.redd.it/Y0b6uSvivyxJ1gtFUqHsF1R1w9WCBZmdRTVGYoAvPj0.png?width=216&amp;crop=smart&amp;auto=webp&amp;s=2da0f9c45a0606bf95916ba2df6913a80fce6b10","width":216,"height":113},{"url":"https://external-preview.redd.it/Y0b6uSvivyxJ1gtFUqHsF1R1w9WCBZmdRTVGYoAvPj0.png?width=320&amp;crop=smart&amp;auto=webp&amp;s=bbac92d7f2a166324514d0d0add5543123d02b1c","width":320,"height":168},{"url":"https://external-preview.redd.it/Y0b6uSvivyxJ1gtFUqHsF1R1w9WCBZmdRTVGYoAvPj0.png?width=640&amp;crop=smart&amp;auto=webp&amp;s=e990c8a8d39910f731443529ec7ac5bc68d1a0d6","width":640,"height":336},{"url":"https://external-preview.redd.it/Y0b6uSvivyxJ1gtFUqHsF1R1w9WCBZmdRTVGYoAvPj0.png?width=960&amp;crop=smart&amp;auto=webp&amp;s=50c4a7490f3b24511d70273c65851066ef37280b","width":960,"height":504},{"url":"https://external-preview.redd.it/Y0b6uSvivyxJ1gtFUqHsF1R1w9WCBZmdRTVGYoAvPj0.png?width=1080&amp;crop=smart&amp;auto=webp&amp;s=bd230b4257ab61964bfe50e2814dafc7f3dce868","width":1080,"height":567}],"variants":{},"id":"Y0b6uSvivyxJ1gtFUqHsF1R1w9WCBZmdRTVGYoAvPj0"}],"enabled":false},"all_awardings":[],"awarders":[],"media_only":false,"link_flair_template_id":"ab9120c4-bf8e-11ed-ae5e-2eb8b7c7e10b","can_gild":false,"spoiler":false,"locked":false,"author_flair_text":null,"treatment_tags":[],"visited":false,"removed_by":null,"mod_note":null,"distinguished":null,"subreddit_id":"t5_81eyvm","author_is_blocked":false,"mod_reason_by":null,"num_reports":null,"removal_reason":null,"link_flair_background_color":"#ccac2b","id":"1m0cdle","is_robot_indexable":true,"num_duplicates":0,"report_reasons":null,"author":"-lq_pl-","discussion_type":null,"num_comments":0,"send_replies":true,"media":null,"contest_mode":false,"author_patreon_flair":false,"author_flair_text_color":null,"permalink":"/r/LocalLLaMA/comments/1m0cdle/pydanticai_is_goat_for_building_agents_in_python/","stickied":false,"url":"https://ai.pydantic.dev/","subreddit_subscribers":499295,"created_utc":1752568312,"num_crossposts":0,"mod_reports":[],"is_video":false}}],"before":null}},{"kind":"Listing","data":{"after":null,"dist":null,"modhash":"","geo_filter":"","children":[],"before":null}}]'),s=()=>t.jsx(e,{data:a});export{s as default};

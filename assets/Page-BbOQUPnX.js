import{j as e}from"./index-DQXiEb7D.js";import{R as t}from"./RedditPostRenderer-BjndLgq8.js";import"./index-B-ILyjT1.js";const a=JSON.parse(`[{"kind":"Listing","data":{"after":null,"dist":1,"modhash":"","geo_filter":"","children":[{"kind":"t3","data":{"approved_at_utc":null,"subreddit":"LocalLLaMA","selftext":"Hey everyone,\\n\\nI'm currently on my master's thesis and with my supervisor we figured that a real-time user-rule-based hallucination prevention framework is something interesting to work on.\\n\\nFor now, I built a custom RegexLogitsProcessor class that takes a Regex pattern as an input and sets the logits to infinity and therefore are not chosen, which match the Regex pattern. To illustrate this, the most simple use-case is that no digits are allowed in the output and the Regex is set to \\"\\\\\\\\d\\".\\n\\n[https://github.com/lebe1/LettucePrevent/blob/main/logits\\\\_processor\\\\_detector.py](https://github.com/lebe1/LettucePrevent/blob/main/logits_processor_detector.py)\\n\\nAnother idea wsa stick within the Huggingface framework and therefore the LogitsProcessor was chosen over the StoppingCriteria.\\n\\n[https://huggingface.co/docs/transformers.js/main/en/api/generation/logits\\\\_process](https://huggingface.co/docs/transformers.js/main/en/api/generation/logits_process)\\n\\nIn my next attempt, I'm trying to extend this class to input a custom python class so that the user can also work with the input and have a case suitable for RAG cases for example like \\"no other numbers than mentioned in the input\\".\\n\\nCurrently I like the approach with Regex due to its transparency but I would be really interested what your thoughts are on this. The only alternative I see could be an NER approach. Could you recommend something like that? What critics do you have in mind with this whole idea or what other features could you see with such a framework?","user_reports":[],"saved":false,"mod_reason_title":null,"gilded":0,"clicked":false,"title":"Hallucination prevention framework","link_flair_richtext":[{"e":"text","t":"Question | Help"}],"subreddit_name_prefixed":"r/LocalLLaMA","hidden":false,"pwls":6,"link_flair_css_class":"","downs":0,"thumbnail_height":null,"top_awarded_type":null,"hide_score":false,"name":"t3_1lqnvfr","quarantine":false,"link_flair_text_color":"dark","upvote_ratio":0.6,"author_flair_background_color":null,"subreddit_type":"public","ups":1,"total_awards_received":0,"media_embed":{},"thumbnail_width":null,"author_flair_template_id":null,"is_original_content":false,"author_fullname":"t2_dy1jw7m8g","secure_media":null,"is_reddit_media_domain":false,"is_meta":false,"category":null,"secure_media_embed":{},"link_flair_text":"Question | Help","can_mod_post":false,"score":1,"approved_by":null,"is_created_from_ads_ui":false,"author_premium":false,"thumbnail":"self","edited":false,"author_flair_css_class":null,"author_flair_richtext":[],"gildings":{},"post_hint":"self","content_categories":null,"is_self":true,"mod_note":null,"created":1751544391,"link_flair_type":"richtext","wls":6,"removed_by_category":null,"banned_by":null,"author_flair_type":"text","domain":"self.LocalLLaMA","allow_live_comments":false,"selftext_html":"&lt;!-- SC_OFF --&gt;&lt;div class=\\"md\\"&gt;&lt;p&gt;Hey everyone,&lt;/p&gt;\\n\\n&lt;p&gt;I&amp;#39;m currently on my master&amp;#39;s thesis and with my supervisor we figured that a real-time user-rule-based hallucination prevention framework is something interesting to work on.&lt;/p&gt;\\n\\n&lt;p&gt;For now, I built a custom RegexLogitsProcessor class that takes a Regex pattern as an input and sets the logits to infinity and therefore are not chosen, which match the Regex pattern. To illustrate this, the most simple use-case is that no digits are allowed in the output and the Regex is set to &amp;quot;\\\\d&amp;quot;.&lt;/p&gt;\\n\\n&lt;p&gt;&lt;a href=\\"https://github.com/lebe1/LettucePrevent/blob/main/logits_processor_detector.py\\"&gt;https://github.com/lebe1/LettucePrevent/blob/main/logits_processor_detector.py&lt;/a&gt;&lt;/p&gt;\\n\\n&lt;p&gt;Another idea wsa stick within the Huggingface framework and therefore the LogitsProcessor was chosen over the StoppingCriteria.&lt;/p&gt;\\n\\n&lt;p&gt;&lt;a href=\\"https://huggingface.co/docs/transformers.js/main/en/api/generation/logits_process\\"&gt;https://huggingface.co/docs/transformers.js/main/en/api/generation/logits_process&lt;/a&gt;&lt;/p&gt;\\n\\n&lt;p&gt;In my next attempt, I&amp;#39;m trying to extend this class to input a custom python class so that the user can also work with the input and have a case suitable for RAG cases for example like &amp;quot;no other numbers than mentioned in the input&amp;quot;.&lt;/p&gt;\\n\\n&lt;p&gt;Currently I like the approach with Regex due to its transparency but I would be really interested what your thoughts are on this. The only alternative I see could be an NER approach. Could you recommend something like that? What critics do you have in mind with this whole idea or what other features could you see with such a framework?&lt;/p&gt;\\n&lt;/div&gt;&lt;!-- SC_ON --&gt;","likes":null,"suggested_sort":null,"banned_at_utc":null,"view_count":null,"archived":false,"no_follow":true,"is_crosspostable":false,"pinned":false,"over_18":false,"preview":{"images":[{"source":{"url":"https://external-preview.redd.it/J6mi4u4VW-V8D0Kj94jzflHiQaSrM_BdcCxJ4Xlh4RU.png?auto=webp&amp;s=97cffbab2a2683ead2d609c30a55166e8f7dc2bf","width":1200,"height":600},"resolutions":[{"url":"https://external-preview.redd.it/J6mi4u4VW-V8D0Kj94jzflHiQaSrM_BdcCxJ4Xlh4RU.png?width=108&amp;crop=smart&amp;auto=webp&amp;s=87d8479c331c36beeb3bfedb2bdc6a12c0645526","width":108,"height":54},{"url":"https://external-preview.redd.it/J6mi4u4VW-V8D0Kj94jzflHiQaSrM_BdcCxJ4Xlh4RU.png?width=216&amp;crop=smart&amp;auto=webp&amp;s=b88cd4f0edfe81f9d10c2c597d117eac1abb7de4","width":216,"height":108},{"url":"https://external-preview.redd.it/J6mi4u4VW-V8D0Kj94jzflHiQaSrM_BdcCxJ4Xlh4RU.png?width=320&amp;crop=smart&amp;auto=webp&amp;s=fa4ed0560e5970b0d9143ecc1c771773742acdfa","width":320,"height":160},{"url":"https://external-preview.redd.it/J6mi4u4VW-V8D0Kj94jzflHiQaSrM_BdcCxJ4Xlh4RU.png?width=640&amp;crop=smart&amp;auto=webp&amp;s=7f5511c86c6822362408285424603198c70978b3","width":640,"height":320},{"url":"https://external-preview.redd.it/J6mi4u4VW-V8D0Kj94jzflHiQaSrM_BdcCxJ4Xlh4RU.png?width=960&amp;crop=smart&amp;auto=webp&amp;s=43ad9da53b859a94f24b9a1af5236ed5e5c4a520","width":960,"height":480},{"url":"https://external-preview.redd.it/J6mi4u4VW-V8D0Kj94jzflHiQaSrM_BdcCxJ4Xlh4RU.png?width=1080&amp;crop=smart&amp;auto=webp&amp;s=76d69410bfbd870b1f975e18c5a1a7ab707eec59","width":1080,"height":540}],"variants":{},"id":"J6mi4u4VW-V8D0Kj94jzflHiQaSrM_BdcCxJ4Xlh4RU"}],"enabled":false},"all_awardings":[],"awarders":[],"media_only":false,"link_flair_template_id":"2c9831e6-bf92-11ed-98e6-d2b8bcc02ae1","can_gild":false,"spoiler":false,"locked":false,"author_flair_text":null,"treatment_tags":[],"visited":false,"removed_by":null,"num_reports":null,"distinguished":null,"subreddit_id":"t5_81eyvm","author_is_blocked":false,"mod_reason_by":null,"removal_reason":null,"link_flair_background_color":"#5a74cc","id":"1lqnvfr","is_robot_indexable":true,"num_duplicates":0,"report_reasons":null,"author":"lebe1","discussion_type":null,"num_comments":5,"send_replies":true,"media":null,"contest_mode":false,"author_patreon_flair":false,"author_flair_text_color":null,"permalink":"/r/LocalLLaMA/comments/1lqnvfr/hallucination_prevention_framework/","stickied":false,"url":"https://www.reddit.com/r/LocalLLaMA/comments/1lqnvfr/hallucination_prevention_framework/","subreddit_subscribers":494198,"created_utc":1751544391,"num_crossposts":0,"mod_reports":[],"is_video":false}}],"before":null}},{"kind":"Listing","data":{"after":null,"dist":null,"modhash":"","geo_filter":"","children":[{"kind":"t1","data":{"subreddit_id":"t5_81eyvm","approved_at_utc":null,"author_is_blocked":false,"comment_type":null,"awarders":[],"mod_reason_by":null,"banned_by":null,"author_flair_type":"text","total_awards_received":0,"subreddit":"LocalLLaMA","author_flair_template_id":null,"likes":null,"replies":{"kind":"Listing","data":{"after":null,"dist":null,"modhash":"","geo_filter":"","children":[{"kind":"t1","data":{"subreddit_id":"t5_81eyvm","approved_at_utc":null,"author_is_blocked":false,"comment_type":null,"awarders":[],"mod_reason_by":null,"banned_by":null,"author_flair_type":"text","total_awards_received":0,"subreddit":"LocalLLaMA","author_flair_template_id":null,"likes":null,"replies":{"kind":"Listing","data":{"after":null,"dist":null,"modhash":"","geo_filter":"","children":[{"kind":"t1","data":{"subreddit_id":"t5_81eyvm","approved_at_utc":null,"author_is_blocked":false,"comment_type":null,"awarders":[],"mod_reason_by":null,"banned_by":null,"author_flair_type":"text","total_awards_received":0,"subreddit":"LocalLLaMA","author_flair_template_id":null,"likes":null,"replies":"","user_reports":[],"saved":false,"id":"n14r73g","banned_at_utc":null,"mod_reason_title":null,"gilded":0,"archived":false,"collapsed_reason_code":null,"no_follow":true,"author":"SnoWayKnown","can_mod_post":false,"send_replies":true,"parent_id":"t1_n14boht","score":2,"author_fullname":"t2_2m5ozemw","removal_reason":null,"approved_by":null,"mod_note":null,"all_awardings":[],"body":"I personally find BNF style grammars easier to read and understand than Regex, but the principle would be the same for Regex. As it is a grammar also, it can be converted to a parse tree, but BNF is much simpler to implement. Regex has gnarly concepts like grouping, backtracking, case modifiers, escaping and there isn't actually a unified standard Regex. Although there is a fairly common subset, when you implement a parser you have to pick a flavour to some extent.\\n \\nNote that there are already BNF grammar output parsers for LLMs (see GGML for example) but I'm not sure of their maturity or how ubiquitous they are.\\n\\nWith BNF it's very easy to define new grammars and they are used everywhere for all modern languages and serialisation formats. You could also look at Mckeeman Form (https://www.crockford.com/mckeeman.html) which is even cleaner, or eBNF which has some fancy constraints support, but I would probably recommend starting with BNF as it's incredibly common and simple to define and probably good enough for your problem. Good luck!","edited":false,"top_awarded_type":null,"downs":0,"author_flair_css_class":null,"name":"t1_n14r73g","is_submitter":false,"collapsed":false,"author_flair_richtext":[],"author_patreon_flair":false,"body_html":"&lt;div class=\\"md\\"&gt;&lt;p&gt;I personally find BNF style grammars easier to read and understand than Regex, but the principle would be the same for Regex. As it is a grammar also, it can be converted to a parse tree, but BNF is much simpler to implement. Regex has gnarly concepts like grouping, backtracking, case modifiers, escaping and there isn&amp;#39;t actually a unified standard Regex. Although there is a fairly common subset, when you implement a parser you have to pick a flavour to some extent.&lt;/p&gt;\\n\\n&lt;p&gt;Note that there are already BNF grammar output parsers for LLMs (see GGML for example) but I&amp;#39;m not sure of their maturity or how ubiquitous they are.&lt;/p&gt;\\n\\n&lt;p&gt;With BNF it&amp;#39;s very easy to define new grammars and they are used everywhere for all modern languages and serialisation formats. You could also look at Mckeeman Form (&lt;a href=\\"https://www.crockford.com/mckeeman.html\\"&gt;https://www.crockford.com/mckeeman.html&lt;/a&gt;) which is even cleaner, or eBNF which has some fancy constraints support, but I would probably recommend starting with BNF as it&amp;#39;s incredibly common and simple to define and probably good enough for your problem. Good luck!&lt;/p&gt;\\n&lt;/div&gt;","gildings":{},"collapsed_reason":null,"distinguished":null,"associated_award":null,"stickied":false,"author_premium":false,"can_gild":false,"link_id":"t3_1lqnvfr","unrepliable_reason":null,"author_flair_text_color":null,"score_hidden":false,"permalink":"/r/LocalLLaMA/comments/1lqnvfr/hallucination_prevention_framework/n14r73g/","subreddit_type":"public","locked":false,"report_reasons":null,"created":1751552642,"author_flair_text":null,"treatment_tags":[],"created_utc":1751552642,"subreddit_name_prefixed":"r/LocalLLaMA","controversiality":0,"depth":2,"author_flair_background_color":null,"collapsed_because_crowd_control":null,"mod_reports":[],"num_reports":null,"ups":2}}],"before":null}},"user_reports":[],"saved":false,"id":"n14boht","banned_at_utc":null,"mod_reason_title":null,"gilded":0,"archived":false,"collapsed_reason_code":null,"no_follow":true,"author":"lebe1","can_mod_post":false,"created_utc":1751547670,"send_replies":true,"parent_id":"t1_n1480nl","score":2,"author_fullname":"t2_dy1jw7m8g","removal_reason":null,"approved_by":null,"mod_note":null,"all_awardings":[],"body":"Wow exactly an answer I was hoping for with a suggestion I haven't even heard of before. Thanks a lot! I will have a look on that soon!\\n\\nSince the framework should still be applicable to non-technical users I figured to provide some kind of prompt template so that the user can describe the rules in words to an LLM and a regex pattern with examples is the output. I assume the same would work with a grammar parse tree/ combinator parser too?","edited":false,"top_awarded_type":null,"author_flair_css_class":null,"name":"t1_n14boht","is_submitter":true,"downs":0,"author_flair_richtext":[],"author_patreon_flair":false,"body_html":"&lt;div class=\\"md\\"&gt;&lt;p&gt;Wow exactly an answer I was hoping for with a suggestion I haven&amp;#39;t even heard of before. Thanks a lot! I will have a look on that soon!&lt;/p&gt;\\n\\n&lt;p&gt;Since the framework should still be applicable to non-technical users I figured to provide some kind of prompt template so that the user can describe the rules in words to an LLM and a regex pattern with examples is the output. I assume the same would work with a grammar parse tree/ combinator parser too?&lt;/p&gt;\\n&lt;/div&gt;","gildings":{},"collapsed_reason":null,"distinguished":null,"associated_award":null,"stickied":false,"author_premium":false,"can_gild":false,"link_id":"t3_1lqnvfr","unrepliable_reason":null,"author_flair_text_color":null,"score_hidden":false,"permalink":"/r/LocalLLaMA/comments/1lqnvfr/hallucination_prevention_framework/n14boht/","subreddit_type":"public","locked":false,"report_reasons":null,"created":1751547670,"author_flair_text":null,"treatment_tags":[],"collapsed":false,"subreddit_name_prefixed":"r/LocalLLaMA","controversiality":0,"depth":1,"author_flair_background_color":null,"collapsed_because_crowd_control":null,"mod_reports":[],"num_reports":null,"ups":2}}],"before":null}},"user_reports":[],"saved":false,"id":"n1480nl","banned_at_utc":null,"mod_reason_title":null,"gilded":0,"archived":false,"collapsed_reason_code":null,"no_follow":false,"author":"SnoWayKnown","can_mod_post":false,"created_utc":1751546391,"send_replies":true,"parent_id":"t3_1lqnvfr","score":5,"author_fullname":"t2_2m5ozemw","approved_by":null,"mod_note":null,"all_awardings":[],"collapsed":false,"body":"I would recommend avoiding Regex for this and focus on a grammar parse tree, using something like a BNF or eBNF based grammar definition and converting it into a combinator parser allows you to define custom grammars for output based on any existing grammars out there (every programming language and text format has one freely available). Just google for combinator parser in python, it takes a little to get your head around but it's not too hard to make a simple one and incredibly powerful.","edited":false,"top_awarded_type":null,"author_flair_css_class":null,"name":"t1_n1480nl","is_submitter":false,"downs":0,"author_flair_richtext":[],"author_patreon_flair":false,"body_html":"&lt;div class=\\"md\\"&gt;&lt;p&gt;I would recommend avoiding Regex for this and focus on a grammar parse tree, using something like a BNF or eBNF based grammar definition and converting it into a combinator parser allows you to define custom grammars for output based on any existing grammars out there (every programming language and text format has one freely available). Just google for combinator parser in python, it takes a little to get your head around but it&amp;#39;s not too hard to make a simple one and incredibly powerful.&lt;/p&gt;\\n&lt;/div&gt;","removal_reason":null,"collapsed_reason":null,"distinguished":null,"associated_award":null,"stickied":false,"author_premium":false,"can_gild":false,"gildings":{},"unrepliable_reason":null,"author_flair_text_color":null,"score_hidden":false,"permalink":"/r/LocalLLaMA/comments/1lqnvfr/hallucination_prevention_framework/n1480nl/","subreddit_type":"public","locked":false,"report_reasons":null,"created":1751546391,"author_flair_text":null,"treatment_tags":[],"link_id":"t3_1lqnvfr","subreddit_name_prefixed":"r/LocalLLaMA","controversiality":0,"depth":0,"author_flair_background_color":null,"collapsed_because_crowd_control":null,"mod_reports":[],"num_reports":null,"ups":5}},{"kind":"t1","data":{"subreddit_id":"t5_81eyvm","approved_at_utc":null,"author_is_blocked":false,"comment_type":null,"awarders":[],"mod_reason_by":null,"banned_by":null,"author_flair_type":"text","total_awards_received":0,"subreddit":"LocalLLaMA","author_flair_template_id":null,"likes":null,"replies":"","user_reports":[],"saved":false,"id":"n14rg7a","banned_at_utc":null,"mod_reason_title":null,"gilded":0,"archived":false,"collapsed_reason_code":null,"no_follow":true,"author":"ExcuseAccomplished97","can_mod_post":false,"created_utc":1751552716,"send_replies":true,"parent_id":"t3_1lqnvfr","score":2,"author_fullname":"t2_73xg2fw4","approved_by":null,"mod_note":null,"all_awardings":[],"collapsed":false,"body":"I've seen similar libraries that control output by limiting logits. I think regex is a good way, simple grammar and generally well understood.\\n\\nHowever, since it limits the token diversity, it might cause degradation of intelligence or something like benchmark score. Have you ever tested it? Thank you.","edited":false,"top_awarded_type":null,"author_flair_css_class":null,"name":"t1_n14rg7a","is_submitter":false,"downs":0,"author_flair_richtext":[],"author_patreon_flair":false,"body_html":"&lt;div class=\\"md\\"&gt;&lt;p&gt;I&amp;#39;ve seen similar libraries that control output by limiting logits. I think regex is a good way, simple grammar and generally well understood.&lt;/p&gt;\\n\\n&lt;p&gt;However, since it limits the token diversity, it might cause degradation of intelligence or something like benchmark score. Have you ever tested it? Thank you.&lt;/p&gt;\\n&lt;/div&gt;","removal_reason":null,"collapsed_reason":null,"distinguished":null,"associated_award":null,"stickied":false,"author_premium":false,"can_gild":false,"gildings":{},"unrepliable_reason":null,"author_flair_text_color":null,"score_hidden":false,"permalink":"/r/LocalLLaMA/comments/1lqnvfr/hallucination_prevention_framework/n14rg7a/","subreddit_type":"public","locked":false,"report_reasons":null,"created":1751552716,"author_flair_text":null,"treatment_tags":[],"link_id":"t3_1lqnvfr","subreddit_name_prefixed":"r/LocalLLaMA","controversiality":0,"depth":0,"author_flair_background_color":null,"collapsed_because_crowd_control":null,"mod_reports":[],"num_reports":null,"ups":2}},{"kind":"t1","data":{"subreddit_id":"t5_81eyvm","approved_at_utc":null,"author_is_blocked":false,"comment_type":null,"awarders":[],"mod_reason_by":null,"banned_by":null,"author_flair_type":"text","total_awards_received":0,"subreddit":"LocalLLaMA","author_flair_template_id":null,"likes":null,"replies":"","user_reports":[],"saved":false,"id":"n15xdfj","banned_at_utc":null,"mod_reason_title":null,"gilded":0,"archived":false,"collapsed_reason_code":null,"no_follow":true,"author":"JC1DA","can_mod_post":false,"created_utc":1751564548,"send_replies":true,"parent_id":"t3_1lqnvfr","score":1,"author_fullname":"t2_gp3kfk8","approved_by":null,"mod_note":null,"all_awardings":[],"collapsed":false,"body":"Check xgrammar, guidance, outlines. they are all doing logits control in inference engines like vllm/sglang","edited":false,"top_awarded_type":null,"author_flair_css_class":null,"name":"t1_n15xdfj","is_submitter":false,"downs":0,"author_flair_richtext":[],"author_patreon_flair":false,"body_html":"&lt;div class=\\"md\\"&gt;&lt;p&gt;Check xgrammar, guidance, outlines. they are all doing logits control in inference engines like vllm/sglang&lt;/p&gt;\\n&lt;/div&gt;","removal_reason":null,"collapsed_reason":null,"distinguished":null,"associated_award":null,"stickied":false,"author_premium":false,"can_gild":false,"gildings":{},"unrepliable_reason":null,"author_flair_text_color":null,"score_hidden":false,"permalink":"/r/LocalLLaMA/comments/1lqnvfr/hallucination_prevention_framework/n15xdfj/","subreddit_type":"public","locked":false,"report_reasons":null,"created":1751564548,"author_flair_text":null,"treatment_tags":[],"link_id":"t3_1lqnvfr","subreddit_name_prefixed":"r/LocalLLaMA","controversiality":0,"depth":0,"author_flair_background_color":null,"collapsed_because_crowd_control":null,"mod_reports":[],"num_reports":null,"ups":1}}],"before":null}}]`),n=()=>e.jsx(t,{data:a});export{n as default};

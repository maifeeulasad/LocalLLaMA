import{j as t}from"./index-CNyNkRpk.js";import{R as e}from"./RedditPostRenderer-Dza0u9i2.js";import"./index-BUchu_-K.js";const n=JSON.parse('[{"kind":"Listing","data":{"after":null,"dist":1,"modhash":"","geo_filter":"","children":[{"kind":"t3","data":{"approved_at_utc":null,"subreddit":"LocalLLaMA","selftext":"# \\n\\nhttps://preview.redd.it/ya6uoxmoikbf1.png?width=1024&amp;format=png&amp;auto=webp&amp;s=69253abb996cd2754a0835f4ada4f543826578ac\\n\\n# Hello everyone! \\n\\nWelcome back to our journey through the “Build Large Language Models from Scratch” series. So far, we’ve spent a considerable amount of time in the first stage of this journey, laying the groundwork by focusing on data preparation and sampling.\\n\\nWe’ve covered:\\n\\n* Tokenization\\n* Byte-Pair Encoding\\n* Word and Positional Embeddings\\n* Model distillation\\n\\nEssentially, we’ve now established a solid foundation for the data preprocessing pipeline. It’s time to move on to something that powers the very core of today’s Large Language Models (LLMs): The Attention Mechanism.\\n\\n# Transformers: The Car, Attention: The Engine\\n\\nIf you think of a Transformer as a car, then attention is its engine. Without it, the whole vehicle wouldn’t move the way we want it to.\\n\\nYou’ve probably heard of ChatGPT, right? The impressive performance of modern large language models, including their ability to understand context, generate coherent text, and handle long-range dependencies, is primarily enabled by the attention mechanism. However, here’s the problem: most tutorials available online jump straight into multi-head attention, skipping over the intuition and basics.\\n\\nSo we’re going to take a different path. A deeper, gentler path.\\n\\n# Why Do We Need Attention?\\n\\nLet’s motivate this with a simple example.\\n\\nImagine this sentence:\\n\\n&gt;*“*The book that the professor whom the students admired wrote became a bestseller*.”*\\n\\nAs humans, we can parse this and understand:\\n\\n* **“**book**”** is the subject\\n* **“**became**”** is the verb\\n* Everything else — *“that the professor whom the students admired wrote”* — is additional context\\n\\nBut for a model, this sentence is challenging. It contains nested clauses and long-term dependencies, meaning the model must track relationships between words that are far apart in the sequence.\\n\\nThe model needs to know:\\n\\n* The book is the thing that became a bestseller\\n* The clauses in between provide important but secondary context\\n\\nNow imagine trying to do this with a simple model that reads one word at a time and only remembers the last few. It could easily get lost and focus too much on “professor” or “students,” losing track of the main subject, the book, and the main action, becoming.\\n\\nThis is where the attention mechanism shines.\\n\\nIt allows the model to focus on the most relevant parts of the sentence dynamically, connecting “book” with “became” while still incorporating the supporting context. This selective focus helps the model maintain a deeper understanding of the sentence’s meaning.\\n\\nWithout attention, models often struggle to preserve this context over longer spans of text, leading to confused or incoherent outputs.\\n\\nThis ability to dynamically focus on different words based on their relevance is what makes attention so powerful. Without it, models can lose track of meaning, especially in long sentences.\\n\\n# The Four Flavors of Attention\\n\\nIn upcoming lectures, we’ll build the full attention stack step-by-step\\n\\n1. **Simplified Self-Attention** — Our starting point. Stripped-down, crystal-clear.\\n2. **Self-Attention** — Adds learnable weights.\\n3. **Causal Attention** — Ensures the model only considers past tokens (not future ones).\\n4. **Multi-Head Attention** — Multiple attention heads process input in parallel.\\n\\nMany tutorials start at step 4 and expect you to know already how to swim. We’ll walk first, then run.\\n\\n# Let’s Go Back in Time\\n\\nBefore the advent of attention, there were Recurrent Neural Networks (RNNs). They were the dominant approach to sequence modeling, like translation.\\n\\nHere’s how they worked:\\n\\n* The encoder reads the input (say, a sentence in German).\\n* The encoder compresses everything into a final hidden state (a “summary” of the whole sentence).\\n* The decoder uses that to generate output (say, in English).\\n\\nBut here’s the problem…\\n\\n# The RNN Bottleneck\\n\\nThe decoder only sees one final hidden state. If the input is long, this becomes a massive problem.\\n\\nThink of trying to summarize a whole book in one sentence, then answer questions about it. That’s what RNNs expected the model to do.\\n\\n# Enter Attention: The 2014 Breakthrough\\n\\nIn 2014, Bahdanau et al. proposed something revolutionary: Why not let the decoder access all the hidden states?\\n\\nSo, instead of relying on just the last hidden state, the decoder can now look back at every part of the input and decide:\\n\\n* Which words matter most?\\n* How much “attention” should I give to each word?\\n\\nIt was like giving the model memory superpowers — and it worked wonders!\\n\\n# Dynamic Focus: The Heart of Attention\\n\\nThe core idea is called dynamic focus. For every word the model tries to generate, it can look back and weigh every input word differently.\\n\\nSuppose the model is generating the word **“**bestseller**”**. With attention, it can do the following:\\n\\n* Pay high attention to “book”, because that’s the subject that became the bestseller\\n* Give moderate attention to “wrote”, since it’s the action that connects the subject and the outcome\\n* Assign less attention to “professor” or “students”, which are part of supporting clauses but not central to this prediction\\n\\nThis ability to assign importance selectively is what allows attention mechanisms to handle long-range dependencies so well, something older architectures like RNNs struggled with.\\n\\nWithout this focused attention, the model might focus onto irrelevant parts of the sentence or lose track of the main subject entirely.\\n\\n# Traditional vs. Self-Attention\\n\\n# Traditional Attention:\\n\\n* Focuses on relationships between two sequences\\n* E.g., translating German to English\\n* Aligning words across sequences\\n\\n# Self-Attention:\\n\\n* Looks within a single sequence\\n* E.g., predicting the next word in English\\n* Determines which words relate to each other **inside** the same sentence\\n\\nThis shift is enormous, and it’s what powers GPT, BERT, and all modern LLMs.\\n\\n# Recap: A Timeline of Attention\\n\\nWe stand on over 40 years of hard-earned research.\\n\\n# What’s Coming Next?\\n\\nIn the next few blog posts, we’ll:\\n\\n1. **Implement Simplified Self-Attention from Scratch** in Python\\n2. **Move to Self-Attention with trainable weights**\\n3. **Introduce Causal Attention** for autoregressive modeling\\n4. **Build a Multi-Head Attention** layer-by-layer\\n\\n**Why Learn Attention from Scratch?**\\n\\nYes, you can use libraries such as Transformers, LangChain, or FlashAttention. However, to truly master large language models, you need to understand how the engine operates under the hood.\\n\\nThat’s the goal of this series. And I promise — it’s worth the effort.\\n\\nThanks for reading this far! ❤️\\n\\nIf this helped clarify the magic of attention, feel free to share it with your friends or comment your thoughts below.\\n\\nNext stop: Simplified Self-Attention, from Theory to Code!\\n\\nStay tuned!\\n\\n","user_reports":[],"saved":false,"mod_reason_title":null,"gilded":0,"clicked":false,"title":"Day 11/50: Building a small language from scratch: Introduction to the Attention Mechanism in Large Language Models (LLMs)","link_flair_richtext":[{"e":"text","t":"Discussion"}],"subreddit_name_prefixed":"r/LocalLLaMA","hidden":false,"pwls":6,"link_flair_css_class":"","downs":0,"thumbnail_height":140,"top_awarded_type":null,"hide_score":false,"media_metadata":{"ya6uoxmoikbf1":{"status":"valid","e":"Image","m":"image/png","p":[{"y":108,"x":108,"u":"https://preview.redd.it/ya6uoxmoikbf1.png?width=108&amp;crop=smart&amp;auto=webp&amp;s=8ce80f8a085795e3dcc098b78afddd73dcac0191"},{"y":216,"x":216,"u":"https://preview.redd.it/ya6uoxmoikbf1.png?width=216&amp;crop=smart&amp;auto=webp&amp;s=4cccc0c780837c01e09ba1810262f9caf3bd3341"},{"y":320,"x":320,"u":"https://preview.redd.it/ya6uoxmoikbf1.png?width=320&amp;crop=smart&amp;auto=webp&amp;s=97710be5c01a495f43bd8fe6f272d1191a92f168"},{"y":640,"x":640,"u":"https://preview.redd.it/ya6uoxmoikbf1.png?width=640&amp;crop=smart&amp;auto=webp&amp;s=80cb8366d2813e29ff4a82eff43ce1d11e552be8"},{"y":960,"x":960,"u":"https://preview.redd.it/ya6uoxmoikbf1.png?width=960&amp;crop=smart&amp;auto=webp&amp;s=5af311f241679ff8a89af4043a97b771255cc918"}],"s":{"y":1024,"x":1024,"u":"https://preview.redd.it/ya6uoxmoikbf1.png?width=1024&amp;format=png&amp;auto=webp&amp;s=69253abb996cd2754a0835f4ada4f543826578ac"},"id":"ya6uoxmoikbf1"}},"name":"t3_1lue75q","quarantine":false,"link_flair_text_color":"light","upvote_ratio":0.93,"author_flair_background_color":null,"subreddit_type":"public","ups":22,"total_awards_received":0,"media_embed":{},"thumbnail_width":140,"author_flair_template_id":null,"is_original_content":false,"author_fullname":"t2_8ht7a116","secure_media":null,"is_reddit_media_domain":false,"is_meta":false,"category":null,"secure_media_embed":{},"link_flair_text":"Discussion","can_mod_post":false,"score":22,"approved_by":null,"is_created_from_ads_ui":false,"author_premium":false,"thumbnail":"https://b.thumbs.redditmedia.com/3xrs0rEfGKpFirEZfNvII0Y7stkFc5h_AVNkVSBnMPw.jpg","edited":false,"author_flair_css_class":null,"author_flair_richtext":[],"gildings":{},"content_categories":null,"is_self":true,"mod_note":null,"created":1751944611,"link_flair_type":"richtext","wls":6,"removed_by_category":null,"banned_by":null,"author_flair_type":"text","domain":"self.LocalLLaMA","allow_live_comments":false,"selftext_html":"&lt;!-- SC_OFF --&gt;&lt;div class=\\"md\\"&gt;&lt;p&gt;&lt;a href=\\"https://preview.redd.it/ya6uoxmoikbf1.png?width=1024&amp;amp;format=png&amp;amp;auto=webp&amp;amp;s=69253abb996cd2754a0835f4ada4f543826578ac\\"&gt;https://preview.redd.it/ya6uoxmoikbf1.png?width=1024&amp;amp;format=png&amp;amp;auto=webp&amp;amp;s=69253abb996cd2754a0835f4ada4f543826578ac&lt;/a&gt;&lt;/p&gt;\\n\\n&lt;h1&gt;Hello everyone! &lt;/h1&gt;\\n\\n&lt;p&gt;Welcome back to our journey through the “Build Large Language Models from Scratch” series. So far, we’ve spent a considerable amount of time in the first stage of this journey, laying the groundwork by focusing on data preparation and sampling.&lt;/p&gt;\\n\\n&lt;p&gt;We’ve covered:&lt;/p&gt;\\n\\n&lt;ul&gt;\\n&lt;li&gt;Tokenization&lt;/li&gt;\\n&lt;li&gt;Byte-Pair Encoding&lt;/li&gt;\\n&lt;li&gt;Word and Positional Embeddings&lt;/li&gt;\\n&lt;li&gt;Model distillation&lt;/li&gt;\\n&lt;/ul&gt;\\n\\n&lt;p&gt;Essentially, we’ve now established a solid foundation for the data preprocessing pipeline. It’s time to move on to something that powers the very core of today’s Large Language Models (LLMs): The Attention Mechanism.&lt;/p&gt;\\n\\n&lt;h1&gt;Transformers: The Car, Attention: The Engine&lt;/h1&gt;\\n\\n&lt;p&gt;If you think of a Transformer as a car, then attention is its engine. Without it, the whole vehicle wouldn’t move the way we want it to.&lt;/p&gt;\\n\\n&lt;p&gt;You’ve probably heard of ChatGPT, right? The impressive performance of modern large language models, including their ability to understand context, generate coherent text, and handle long-range dependencies, is primarily enabled by the attention mechanism. However, here’s the problem: most tutorials available online jump straight into multi-head attention, skipping over the intuition and basics.&lt;/p&gt;\\n\\n&lt;p&gt;So we’re going to take a different path. A deeper, gentler path.&lt;/p&gt;\\n\\n&lt;h1&gt;Why Do We Need Attention?&lt;/h1&gt;\\n\\n&lt;p&gt;Let’s motivate this with a simple example.&lt;/p&gt;\\n\\n&lt;p&gt;Imagine this sentence:&lt;/p&gt;\\n\\n&lt;blockquote&gt;\\n&lt;p&gt;&lt;em&gt;“&lt;/em&gt;The book that the professor whom the students admired wrote became a bestseller&lt;em&gt;.”&lt;/em&gt;&lt;/p&gt;\\n&lt;/blockquote&gt;\\n\\n&lt;p&gt;As humans, we can parse this and understand:&lt;/p&gt;\\n\\n&lt;ul&gt;\\n&lt;li&gt;&lt;strong&gt;“&lt;/strong&gt;book&lt;strong&gt;”&lt;/strong&gt; is the subject&lt;/li&gt;\\n&lt;li&gt;&lt;strong&gt;“&lt;/strong&gt;became&lt;strong&gt;”&lt;/strong&gt; is the verb&lt;/li&gt;\\n&lt;li&gt;Everything else — &lt;em&gt;“that the professor whom the students admired wrote”&lt;/em&gt; — is additional context&lt;/li&gt;\\n&lt;/ul&gt;\\n\\n&lt;p&gt;But for a model, this sentence is challenging. It contains nested clauses and long-term dependencies, meaning the model must track relationships between words that are far apart in the sequence.&lt;/p&gt;\\n\\n&lt;p&gt;The model needs to know:&lt;/p&gt;\\n\\n&lt;ul&gt;\\n&lt;li&gt;The book is the thing that became a bestseller&lt;/li&gt;\\n&lt;li&gt;The clauses in between provide important but secondary context&lt;/li&gt;\\n&lt;/ul&gt;\\n\\n&lt;p&gt;Now imagine trying to do this with a simple model that reads one word at a time and only remembers the last few. It could easily get lost and focus too much on “professor” or “students,” losing track of the main subject, the book, and the main action, becoming.&lt;/p&gt;\\n\\n&lt;p&gt;This is where the attention mechanism shines.&lt;/p&gt;\\n\\n&lt;p&gt;It allows the model to focus on the most relevant parts of the sentence dynamically, connecting “book” with “became” while still incorporating the supporting context. This selective focus helps the model maintain a deeper understanding of the sentence’s meaning.&lt;/p&gt;\\n\\n&lt;p&gt;Without attention, models often struggle to preserve this context over longer spans of text, leading to confused or incoherent outputs.&lt;/p&gt;\\n\\n&lt;p&gt;This ability to dynamically focus on different words based on their relevance is what makes attention so powerful. Without it, models can lose track of meaning, especially in long sentences.&lt;/p&gt;\\n\\n&lt;h1&gt;The Four Flavors of Attention&lt;/h1&gt;\\n\\n&lt;p&gt;In upcoming lectures, we’ll build the full attention stack step-by-step&lt;/p&gt;\\n\\n&lt;ol&gt;\\n&lt;li&gt;&lt;strong&gt;Simplified Self-Attention&lt;/strong&gt; — Our starting point. Stripped-down, crystal-clear.&lt;/li&gt;\\n&lt;li&gt;&lt;strong&gt;Self-Attention&lt;/strong&gt; — Adds learnable weights.&lt;/li&gt;\\n&lt;li&gt;&lt;strong&gt;Causal Attention&lt;/strong&gt; — Ensures the model only considers past tokens (not future ones).&lt;/li&gt;\\n&lt;li&gt;&lt;strong&gt;Multi-Head Attention&lt;/strong&gt; — Multiple attention heads process input in parallel.&lt;/li&gt;\\n&lt;/ol&gt;\\n\\n&lt;p&gt;Many tutorials start at step 4 and expect you to know already how to swim. We’ll walk first, then run.&lt;/p&gt;\\n\\n&lt;h1&gt;Let’s Go Back in Time&lt;/h1&gt;\\n\\n&lt;p&gt;Before the advent of attention, there were Recurrent Neural Networks (RNNs). They were the dominant approach to sequence modeling, like translation.&lt;/p&gt;\\n\\n&lt;p&gt;Here’s how they worked:&lt;/p&gt;\\n\\n&lt;ul&gt;\\n&lt;li&gt;The encoder reads the input (say, a sentence in German).&lt;/li&gt;\\n&lt;li&gt;The encoder compresses everything into a final hidden state (a “summary” of the whole sentence).&lt;/li&gt;\\n&lt;li&gt;The decoder uses that to generate output (say, in English).&lt;/li&gt;\\n&lt;/ul&gt;\\n\\n&lt;p&gt;But here’s the problem…&lt;/p&gt;\\n\\n&lt;h1&gt;The RNN Bottleneck&lt;/h1&gt;\\n\\n&lt;p&gt;The decoder only sees one final hidden state. If the input is long, this becomes a massive problem.&lt;/p&gt;\\n\\n&lt;p&gt;Think of trying to summarize a whole book in one sentence, then answer questions about it. That’s what RNNs expected the model to do.&lt;/p&gt;\\n\\n&lt;h1&gt;Enter Attention: The 2014 Breakthrough&lt;/h1&gt;\\n\\n&lt;p&gt;In 2014, Bahdanau et al. proposed something revolutionary: Why not let the decoder access all the hidden states?&lt;/p&gt;\\n\\n&lt;p&gt;So, instead of relying on just the last hidden state, the decoder can now look back at every part of the input and decide:&lt;/p&gt;\\n\\n&lt;ul&gt;\\n&lt;li&gt;Which words matter most?&lt;/li&gt;\\n&lt;li&gt;How much “attention” should I give to each word?&lt;/li&gt;\\n&lt;/ul&gt;\\n\\n&lt;p&gt;It was like giving the model memory superpowers — and it worked wonders!&lt;/p&gt;\\n\\n&lt;h1&gt;Dynamic Focus: The Heart of Attention&lt;/h1&gt;\\n\\n&lt;p&gt;The core idea is called dynamic focus. For every word the model tries to generate, it can look back and weigh every input word differently.&lt;/p&gt;\\n\\n&lt;p&gt;Suppose the model is generating the word &lt;strong&gt;“&lt;/strong&gt;bestseller&lt;strong&gt;”&lt;/strong&gt;. With attention, it can do the following:&lt;/p&gt;\\n\\n&lt;ul&gt;\\n&lt;li&gt;Pay high attention to “book”, because that’s the subject that became the bestseller&lt;/li&gt;\\n&lt;li&gt;Give moderate attention to “wrote”, since it’s the action that connects the subject and the outcome&lt;/li&gt;\\n&lt;li&gt;Assign less attention to “professor” or “students”, which are part of supporting clauses but not central to this prediction&lt;/li&gt;\\n&lt;/ul&gt;\\n\\n&lt;p&gt;This ability to assign importance selectively is what allows attention mechanisms to handle long-range dependencies so well, something older architectures like RNNs struggled with.&lt;/p&gt;\\n\\n&lt;p&gt;Without this focused attention, the model might focus onto irrelevant parts of the sentence or lose track of the main subject entirely.&lt;/p&gt;\\n\\n&lt;h1&gt;Traditional vs. Self-Attention&lt;/h1&gt;\\n\\n&lt;h1&gt;Traditional Attention:&lt;/h1&gt;\\n\\n&lt;ul&gt;\\n&lt;li&gt;Focuses on relationships between two sequences&lt;/li&gt;\\n&lt;li&gt;E.g., translating German to English&lt;/li&gt;\\n&lt;li&gt;Aligning words across sequences&lt;/li&gt;\\n&lt;/ul&gt;\\n\\n&lt;h1&gt;Self-Attention:&lt;/h1&gt;\\n\\n&lt;ul&gt;\\n&lt;li&gt;Looks within a single sequence&lt;/li&gt;\\n&lt;li&gt;E.g., predicting the next word in English&lt;/li&gt;\\n&lt;li&gt;Determines which words relate to each other &lt;strong&gt;inside&lt;/strong&gt; the same sentence&lt;/li&gt;\\n&lt;/ul&gt;\\n\\n&lt;p&gt;This shift is enormous, and it’s what powers GPT, BERT, and all modern LLMs.&lt;/p&gt;\\n\\n&lt;h1&gt;Recap: A Timeline of Attention&lt;/h1&gt;\\n\\n&lt;p&gt;We stand on over 40 years of hard-earned research.&lt;/p&gt;\\n\\n&lt;h1&gt;What’s Coming Next?&lt;/h1&gt;\\n\\n&lt;p&gt;In the next few blog posts, we’ll:&lt;/p&gt;\\n\\n&lt;ol&gt;\\n&lt;li&gt;&lt;strong&gt;Implement Simplified Self-Attention from Scratch&lt;/strong&gt; in Python&lt;/li&gt;\\n&lt;li&gt;&lt;strong&gt;Move to Self-Attention with trainable weights&lt;/strong&gt;&lt;/li&gt;\\n&lt;li&gt;&lt;strong&gt;Introduce Causal Attention&lt;/strong&gt; for autoregressive modeling&lt;/li&gt;\\n&lt;li&gt;&lt;strong&gt;Build a Multi-Head Attention&lt;/strong&gt; layer-by-layer&lt;/li&gt;\\n&lt;/ol&gt;\\n\\n&lt;p&gt;&lt;strong&gt;Why Learn Attention from Scratch?&lt;/strong&gt;&lt;/p&gt;\\n\\n&lt;p&gt;Yes, you can use libraries such as Transformers, LangChain, or FlashAttention. However, to truly master large language models, you need to understand how the engine operates under the hood.&lt;/p&gt;\\n\\n&lt;p&gt;That’s the goal of this series. And I promise — it’s worth the effort.&lt;/p&gt;\\n\\n&lt;p&gt;Thanks for reading this far! ❤️&lt;/p&gt;\\n\\n&lt;p&gt;If this helped clarify the magic of attention, feel free to share it with your friends or comment your thoughts below.&lt;/p&gt;\\n\\n&lt;p&gt;Next stop: Simplified Self-Attention, from Theory to Code!&lt;/p&gt;\\n\\n&lt;p&gt;Stay tuned!&lt;/p&gt;\\n&lt;/div&gt;&lt;!-- SC_ON --&gt;","likes":null,"suggested_sort":null,"banned_at_utc":null,"view_count":null,"archived":false,"no_follow":false,"is_crosspostable":false,"pinned":false,"over_18":false,"all_awardings":[],"awarders":[],"media_only":false,"link_flair_template_id":"5f921ea4-c7bc-11ed-9c23-3a00622979b4","can_gild":false,"spoiler":false,"locked":false,"author_flair_text":null,"treatment_tags":[],"visited":false,"removed_by":null,"num_reports":null,"distinguished":null,"subreddit_id":"t5_81eyvm","author_is_blocked":false,"mod_reason_by":null,"removal_reason":null,"link_flair_background_color":"#646d73","id":"1lue75q","is_robot_indexable":true,"num_duplicates":0,"report_reasons":null,"author":"Prashant-Lakhera","discussion_type":null,"num_comments":0,"send_replies":true,"media":null,"contest_mode":false,"author_patreon_flair":false,"author_flair_text_color":null,"permalink":"/r/LocalLLaMA/comments/1lue75q/day_1150_building_a_small_language_from_scratch/","stickied":false,"url":"https://www.reddit.com/r/LocalLLaMA/comments/1lue75q/day_1150_building_a_small_language_from_scratch/","subreddit_subscribers":496034,"created_utc":1751944611,"num_crossposts":0,"mod_reports":[],"is_video":false}}],"before":null}},{"kind":"Listing","data":{"after":null,"dist":null,"modhash":"","geo_filter":"","children":[],"before":null}}]'),i=()=>t.jsx(e,{data:n});export{i as default};

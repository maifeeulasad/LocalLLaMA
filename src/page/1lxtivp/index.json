[
  {
    "kind": "Listing",
    "data": {
      "after": null,
      "dist": 1,
      "modhash": "",
      "geo_filter": "",
      "children": [
        {
          "kind": "t3",
          "data": {
            "approved_at_utc": null,
            "subreddit": "LocalLLaMA",
            "selftext": "Hi everyone, I'm trying to write some simple demo which uses an AI agent to play N-puzzle. I envision that the AI would use: move\\\\\\_up, move\\\\\\_down, move\\\\\\_right, move\\\\\\_left to move the game state, and also a print\\\\\\_state tool to print the current state. Here is my code:\n\n\n\nfrom pdb import set\\_trace\n\nimport os\n\nimport json\n\nfrom copy import deepcopy\n\nimport requests\n\nimport math\n\nimport inspect\n\nfrom inspect import signature\n\nimport numpy as np\n\nfrom pprint import pprint\n\nimport hashlib\n\nfrom collections import deque, defaultdict\n\nimport time\n\nimport random\n\nimport re\n\n\n\nfrom typing import Annotated, Sequence, TypedDict\n\nfrom pydantic import BaseModel, Field\n\n\n\nfrom pydantic\\_ai import Agent, RunContext\n\nfrom pydantic\\_ai.models.openai import OpenAIModel\n\nfrom pydantic\\_ai.providers.openai import OpenAIProvider\n\n\n\nollama\\_model = OpenAIModel(\n\nmodel\\_name='qwen3:latest', provider=OpenAIProvider(base\\_url='http://localhost:11434/v1')\n\n)\n\nagent = Agent(ollama\\_model,\n\n\\# output\\_type=CityLocation\n\n)\n\n\n\ndef get\\_n\\_digit(num):\n\nif num &gt; 0:\n\ndigits = int(math.log10(num))+1\n\nelif num == 0:\n\ndigits = 1\n\nelse:\n\ndigits = int(math.log10(-num))+2 # +1 if you don't count the '-' \n\nreturn digits\n\n\n\n\n\nclass GameState:\n\ndef \\_\\_init\\_\\_(self, start, goal):\n\nself.start = start\n\nself.goal = goal\n\n\n\nself.size = start.shape\\[0\\]\n\nself.state = deepcopy(start)\n\n\n\n\n\ndef get\\_state(self):\n\nreturn self.state\n\n\n\n\n\ndef finished(self):\n\nis\\_finished = (self.state==self.goal).all()\n\nif is\\_finished:\n\nprint(\"FINISHED!\")\n\nset\\_trace()\n\nreturn is\\_finished       \n\n\n\n\n\ndef print\\_state(self, no\\_print=False):\n\nmax\\_elem = np.max(self.state)\n\nn\\_digit = get\\_n\\_digit(max\\_elem)\n\n\n\nstate\\_text = \"\"\n\n\n\nfor row\\_idx in range(self.size):\n\nfor col\\_idx in range(self.size):\n\nif int(self.state\\[row\\_idx, col\\_idx\\]) != 0:\n\ntext = '{num:0{width}} '.format(num=self.state\\[row\\_idx, col\\_idx\\], width=n\\_digit)\n\nelse:                    \n\ntext = \"\\_\" \\* (n\\_digit) + \" \"\n\nstate\\_text += text\n\nstate\\_text += \"\\\\n\"\n\nif no\\_print is False:\n\nprint(state\\_text)\n\n\n\nreturn state\\_text\n\n\n\n\n\ndef create\\_diff\\_view(self):\n\n\"\"\"Show which tiles are out of place\"\"\"\n\ndiff\\_state = \"\"\n\nfor i in range(self.size):\n\nfor j in range(self.size):\n\ncurrent = self.state\\[i, j\\]\n\ntarget = self.goal\\[i, j\\]\n\nif current == target:\n\ndiff\\_state += f\"✓{current} \"\n\nelse:\n\ndiff\\_state += f\"✗{current} \"\n\ndiff\\_state += \"\\\\n\"\n\nreturn diff\\_state\n\n\n\n\n\n\n\ndef move\\_up(self):\n\nitemindex = np.where(self.state == 0)\n\npos\\_row = int(itemindex\\[0\\]\\[0\\])\n\npos\\_col = int(itemindex\\[1\\]\\[0\\])\n\n\n\nif (pos\\_row == 0):\n\nreturn\n\n\n\ntemp = self.state\\[pos\\_row, pos\\_col\\]\n\nself.state\\[pos\\_row, pos\\_col\\] = self.state\\[pos\\_row-1, pos\\_col\\]\n\nself.state\\[pos\\_row-1, pos\\_col\\] = temp\n\n\n\n\n\ndef move\\_down(self):\n\nitemindex = np.where(self.state == 0)\n\npos\\_row = int(itemindex\\[0\\]\\[0\\])\n\npos\\_col = int(itemindex\\[1\\]\\[0\\])\n\n\n\nif (pos\\_row == (self.size-1)):\n\nreturn\n\n\n\ntemp = self.state\\[pos\\_row, pos\\_col\\]\n\nself.state\\[pos\\_row, pos\\_col\\] = self.state\\[pos\\_row+1, pos\\_col\\]\n\nself.state\\[pos\\_row+1, pos\\_col\\] = temp\n\n\n\n\n\ndef move\\_left(self):\n\nitemindex = np.where(self.state == 0)\n\npos\\_row = int(itemindex\\[0\\]\\[0\\])\n\npos\\_col = int(itemindex\\[1\\]\\[0\\])\n\n\n\nif (pos\\_col == 0):\n\nreturn\n\n\n\ntemp = self.state\\[pos\\_row, pos\\_col\\]\n\nself.state\\[pos\\_row, pos\\_col\\] = self.state\\[pos\\_row, pos\\_col-1\\]\n\nself.state\\[pos\\_row, pos\\_col-1\\] = temp\n\n\n\n\n\ndef move\\_right(self):\n\nitemindex = np.where(self.state == 0)\n\npos\\_row = int(itemindex\\[0\\]\\[0\\])\n\npos\\_col = int(itemindex\\[1\\]\\[0\\])\n\n\n\nif (pos\\_col == (self.size-1)):\n\nreturn\n\n\n\ntemp = self.state\\[pos\\_row, pos\\_col\\]\n\nself.state\\[pos\\_row, pos\\_col\\] = self.state\\[pos\\_row, pos\\_col+1\\]\n\nself.state\\[pos\\_row, pos\\_col+1\\] = temp\n\n\n\n\\# 8-puzzle\n\n\\# start = np.array(\\[\n\n\\# \\[0, 1, 3\\],\n\n\\# \\[4, 2, 5\\],\n\n\\# \\[7, 8, 6\\],\n\n\\# \\])\n\n\n\n\\# goal = np.array(\\[\n\n\\# \\[1, 2, 3\\],\n\n\\# \\[4, 5, 6\\],\n\n\\# \\[7, 8, 0\\],\n\n\\# \\])\n\n\n\n\\# 15-puzzle\n\nstart = np.array(\\[\n\n\\[ 6, 13,  7, 10\\],\n\n\\[ 8,  9, 11,  0\\],\n\n\\[15,  2, 12,  5\\],\n\n\\[14,  3,  1,  4\\],\n\n\\])\n\n\n\ngoal = np.array(\\[\n\n\\[ 1,  2,  3,  4\\],\n\n\\[ 5,  6,  7,  8\\],\n\n\\[ 9, 10, 11, 12\\],\n\n\\[13, 14, 15,  0\\],\n\n\\])\n\n\n\n\n\ngame\\_state = GameState(start, goal)\n\n\n\n\\# u/agent.tool\\_plain\n\n\\# def check\\_finished() -&gt; bool:\n\n\\# \"\"\"Check whether or not the game state has reached the goal. Returns a boolean value\"\"\"\n\n\\# print(f\"CALL TOOL: {inspect.currentframe().f\\_code.co\\_name}\")\n\n\\# return game\\_state.finished()\n\n\n\nu/agent.tool\\_plain\n\ndef move\\_up():\n\n\"\"\"Move the '\\_' tile up by one block, swapping the tile with the number above. Returns the text describing the new game state after moving up.\"\"\"\n\nprint(f\"CALL TOOL: {inspect.currentframe().f\\_code.co\\_name}\")\n\ngame\\_state.move\\_up()\n\nreturn game\\_state.print\\_state(no\\_print=True)\n\n\n\n\n\nu/agent.tool\\_plain    \n\ndef move\\_down():\n\n\"\"\"Move the '\\_' tile down by one block, swapping the tile with the number below. Returns the text describing the new game state after moving down.\"\"\"\n\nprint(f\"CALL TOOL: {inspect.currentframe().f\\_code.co\\_name}\")\n\ngame\\_state.move\\_down()\n\nreturn game\\_state.print\\_state(no\\_print=True)\n\n\n\n\n\nu/agent.tool\\_plain    \n\ndef move\\_left():\n\n\"\"\"Move the '\\_' tile left by one block, swapping the tile with the number to the left. Returns the text describing the new game state after moving left.\"\"\"\n\nprint(f\"CALL TOOL: {inspect.currentframe().f\\_code.co\\_name}\")\n\ngame\\_state.move\\_left()\n\nreturn game\\_state.print\\_state(no\\_print=True)\n\n\n\n\n\nu/agent.tool\\_plain   \n\ndef move\\_right():\n\n\"\"\"Move the '\\_' tile right by one block, swapping the tile with the number to the right. Returns the text describing the new game state after moving right.\"\"\"\n\nprint(f\"CALL TOOL: {inspect.currentframe().f\\_code.co\\_name}\")\n\ngame\\_state.move\\_right()\n\nreturn game\\_state.print\\_state(no\\_print=True)\n\n\n\nu/agent.tool\\_plain\n\ndef print\\_state():\n\n\"\"\"Print the current game state.\"\"\"\n\nprint(f\"CALL TOOL: {inspect.currentframe().f\\_code.co\\_name}\")\n\nreturn game\\_state.print\\_state(no\\_print=True)\n\n\n\n\n\ndef main():\n\nmax\\_elem = np.max(goal)\n\nn\\_digit = get\\_n\\_digit(max\\_elem)\n\nsize = goal.shape\\[0\\]\n\ngoal\\_text = \"\"\n\n\n\n\\# tool\\_list = \\[move\\_up, move\\_down, move\\_left, move\\_right\\]\n\n\n\nfor row\\_idx in range(size):\n\nfor col\\_idx in range(size):\n\nif int(goal\\[row\\_idx, col\\_idx\\]) != 0:\n\ntext = '{num:0{width}} '.format(num=goal\\[row\\_idx, col\\_idx\\], width=n\\_digit)\n\nelse:                    \n\ntext = \"\\_\" \\* (n\\_digit) + \" \"\n\ngoal\\_text += text\n\ngoal\\_text += \"\\\\n\"\n\n\n\nstate\\_text = game\\_state.print\\_state()\n\n\n\ndice\\_result = agent.run\\_sync(f\"\"\"\n\nYou are an N-puzzle solver. \n\nYou need to find moves to go from the current state to the goal, such that all positions in current state are the same as the goal. At each turn, you can either move up, move down, move left, or move right. \n\nWhen you move the tile, the position of the tile will be swapped with the number at the place where you move to. \n\nIn the final answer, output the LIST OF MOVES, which should be either: move\\_left, move\\_right, move\\_up or move\\_down.\n\n\n\nCURRENT STATE:\n\n{state\\_text}\n\n\n\nGOAL STATE:\n\n{goal\\_text}\n\n\n\nEXAMPLE\\_OUTPUT (the \"FINAL ANSWER\" section):\n\nmove\\_left, move\\_right, move\\_up, move\\_down\n\n\n\n\"\"\", \n\ndeps='Anne')\n\npprint(dice\\_result.output)\n\npprint(dice\\_result.all\\_messages())\n\n\n\nif \\_\\_name\\_\\_ == \"\\_\\_main\\_\\_\":\n\nmain()\n\n\n\nWhen I tried on 8-puzzle (N=3), then the agent worked well. An example is here:\n\n\n\n\\# 8-puzzle\n\nstart = np.array(\\[\n\n\\[0, 1, 3\\],\n\n\\[4, 2, 5\\],\n\n\\[7, 8, 6\\],\n\n\\])\n\n\n\ngoal = np.array(\\[\n\n\\[1, 2, 3\\],\n\n\\[4, 5, 6\\],\n\n\\[7, 8, 0\\],\n\n\\])\n\n\n\nI used Qwen3:latest from Ollama as the LLM, on my laptop with 8GB GPU. I tried other models such as Gemma3 but the performance wasn't good (I tried on a separate code which doesn't use Pydantic AI but instead uses LLM to answer in predetermined format and from that call the functions in that format, because I was trying to learn how AI agents work under the hood, thing is each model had different outputs so really hard to do that). The outputs showed that the agent did call tools:\n\n\n\n\\[https://pastebin.com/m0U2E66w\\](https://pastebin.com/m0U2E66w)  \n\nHowever, on 15-puzzle (N=3), the agent could not work at all, it completely failed to call any tool whatsoever.\n\n\n\n\\[https://pastebin.com/yqM6YZuq\\](https://pastebin.com/yqM6YZuq)\n\n\n\nDoes anyone know how to fix this ? I am still learning to would appreciate any resources, papers, tutorials, etc. which you guys point to. Thank you!",
            "user_reports": [],
            "saved": false,
            "mod_reason_title": null,
            "gilded": 0,
            "clicked": false,
            "title": "Trying to use AI agent to play N-puzzle but the agent could only solve 8-puzzle but completely failed on 15-puzzle.",
            "link_flair_richtext": [
              {
                "e": "text",
                "t": "Question | Help"
              }
            ],
            "subreddit_name_prefixed": "r/LocalLLaMA",
            "hidden": false,
            "pwls": 6,
            "link_flair_css_class": "",
            "downs": 0,
            "thumbnail_height": null,
            "top_awarded_type": null,
            "hide_score": false,
            "name": "t3_1lxtivp",
            "quarantine": false,
            "link_flair_text_color": "dark",
            "upvote_ratio": 0.71,
            "author_flair_background_color": null,
            "subreddit_type": "public",
            "ups": 3,
            "total_awards_received": 0,
            "media_embed": {},
            "thumbnail_width": null,
            "author_flair_template_id": null,
            "is_original_content": false,
            "author_fullname": "t2_t6pzf08p",
            "secure_media": null,
            "is_reddit_media_domain": false,
            "is_meta": false,
            "category": null,
            "secure_media_embed": {},
            "link_flair_text": "Question | Help",
            "can_mod_post": false,
            "score": 3,
            "approved_by": null,
            "is_created_from_ads_ui": false,
            "author_premium": false,
            "thumbnail": "self",
            "edited": false,
            "author_flair_css_class": null,
            "author_flair_richtext": [],
            "gildings": {},
            "content_categories": null,
            "is_self": true,
            "mod_note": null,
            "created": 1752301446,
            "link_flair_type": "richtext",
            "wls": 6,
            "removed_by_category": null,
            "banned_by": null,
            "author_flair_type": "text",
            "domain": "self.LocalLLaMA",
            "allow_live_comments": false,
            "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Hi everyone, I&amp;#39;m trying to write some simple demo which uses an AI agent to play N-puzzle. I envision that the AI would use: move\\_up, move\\_down, move\\_right, move\\_left to move the game state, and also a print\\_state tool to print the current state. Here is my code:&lt;/p&gt;\n\n&lt;p&gt;from pdb import set_trace&lt;/p&gt;\n\n&lt;p&gt;import os&lt;/p&gt;\n\n&lt;p&gt;import json&lt;/p&gt;\n\n&lt;p&gt;from copy import deepcopy&lt;/p&gt;\n\n&lt;p&gt;import requests&lt;/p&gt;\n\n&lt;p&gt;import math&lt;/p&gt;\n\n&lt;p&gt;import inspect&lt;/p&gt;\n\n&lt;p&gt;from inspect import signature&lt;/p&gt;\n\n&lt;p&gt;import numpy as np&lt;/p&gt;\n\n&lt;p&gt;from pprint import pprint&lt;/p&gt;\n\n&lt;p&gt;import hashlib&lt;/p&gt;\n\n&lt;p&gt;from collections import deque, defaultdict&lt;/p&gt;\n\n&lt;p&gt;import time&lt;/p&gt;\n\n&lt;p&gt;import random&lt;/p&gt;\n\n&lt;p&gt;import re&lt;/p&gt;\n\n&lt;p&gt;from typing import Annotated, Sequence, TypedDict&lt;/p&gt;\n\n&lt;p&gt;from pydantic import BaseModel, Field&lt;/p&gt;\n\n&lt;p&gt;from pydantic_ai import Agent, RunContext&lt;/p&gt;\n\n&lt;p&gt;from pydantic_ai.models.openai import OpenAIModel&lt;/p&gt;\n\n&lt;p&gt;from pydantic_ai.providers.openai import OpenAIProvider&lt;/p&gt;\n\n&lt;p&gt;ollama_model = OpenAIModel(&lt;/p&gt;\n\n&lt;p&gt;model_name=&amp;#39;qwen3:latest&amp;#39;, provider=OpenAIProvider(base_url=&amp;#39;http://localhost:11434/v1&amp;#39;)&lt;/p&gt;\n\n&lt;p&gt;)&lt;/p&gt;\n\n&lt;p&gt;agent = Agent(ollama_model,&lt;/p&gt;\n\n&lt;p&gt;# output_type=CityLocation&lt;/p&gt;\n\n&lt;p&gt;)&lt;/p&gt;\n\n&lt;p&gt;def get_n_digit(num):&lt;/p&gt;\n\n&lt;p&gt;if num &amp;gt; 0:&lt;/p&gt;\n\n&lt;p&gt;digits = int(math.log10(num))+1&lt;/p&gt;\n\n&lt;p&gt;elif num == 0:&lt;/p&gt;\n\n&lt;p&gt;digits = 1&lt;/p&gt;\n\n&lt;p&gt;else:&lt;/p&gt;\n\n&lt;p&gt;digits = int(math.log10(-num))+2 # +1 if you don&amp;#39;t count the &amp;#39;-&amp;#39; &lt;/p&gt;\n\n&lt;p&gt;return digits&lt;/p&gt;\n\n&lt;p&gt;class GameState:&lt;/p&gt;\n\n&lt;p&gt;def __init__(self, start, goal):&lt;/p&gt;\n\n&lt;p&gt;self.start = start&lt;/p&gt;\n\n&lt;p&gt;self.goal = goal&lt;/p&gt;\n\n&lt;p&gt;self.size = start.shape[0]&lt;/p&gt;\n\n&lt;p&gt;self.state = deepcopy(start)&lt;/p&gt;\n\n&lt;p&gt;def get_state(self):&lt;/p&gt;\n\n&lt;p&gt;return self.state&lt;/p&gt;\n\n&lt;p&gt;def finished(self):&lt;/p&gt;\n\n&lt;p&gt;is_finished = (self.state==self.goal).all()&lt;/p&gt;\n\n&lt;p&gt;if is_finished:&lt;/p&gt;\n\n&lt;p&gt;print(&amp;quot;FINISHED!&amp;quot;)&lt;/p&gt;\n\n&lt;p&gt;set_trace()&lt;/p&gt;\n\n&lt;p&gt;return is_finished       &lt;/p&gt;\n\n&lt;p&gt;def print_state(self, no_print=False):&lt;/p&gt;\n\n&lt;p&gt;max_elem = np.max(self.state)&lt;/p&gt;\n\n&lt;p&gt;n_digit = get_n_digit(max_elem)&lt;/p&gt;\n\n&lt;p&gt;state_text = &amp;quot;&amp;quot;&lt;/p&gt;\n\n&lt;p&gt;for row_idx in range(self.size):&lt;/p&gt;\n\n&lt;p&gt;for col_idx in range(self.size):&lt;/p&gt;\n\n&lt;p&gt;if int(self.state[row_idx, col_idx]) != 0:&lt;/p&gt;\n\n&lt;p&gt;text = &amp;#39;{num:0{width}} &amp;#39;.format(num=self.state[row_idx, col_idx], width=n_digit)&lt;/p&gt;\n\n&lt;p&gt;else:                    &lt;/p&gt;\n\n&lt;p&gt;text = &amp;quot;_&amp;quot; * (n_digit) + &amp;quot; &amp;quot;&lt;/p&gt;\n\n&lt;p&gt;state_text += text&lt;/p&gt;\n\n&lt;p&gt;state_text += &amp;quot;\\n&amp;quot;&lt;/p&gt;\n\n&lt;p&gt;if no_print is False:&lt;/p&gt;\n\n&lt;p&gt;print(state_text)&lt;/p&gt;\n\n&lt;p&gt;return state_text&lt;/p&gt;\n\n&lt;p&gt;def create_diff_view(self):&lt;/p&gt;\n\n&lt;p&gt;&amp;quot;&amp;quot;&amp;quot;Show which tiles are out of place&amp;quot;&amp;quot;&amp;quot;&lt;/p&gt;\n\n&lt;p&gt;diff_state = &amp;quot;&amp;quot;&lt;/p&gt;\n\n&lt;p&gt;for i in range(self.size):&lt;/p&gt;\n\n&lt;p&gt;for j in range(self.size):&lt;/p&gt;\n\n&lt;p&gt;current = self.state[i, j]&lt;/p&gt;\n\n&lt;p&gt;target = self.goal[i, j]&lt;/p&gt;\n\n&lt;p&gt;if current == target:&lt;/p&gt;\n\n&lt;p&gt;diff_state += f&amp;quot;✓{current} &amp;quot;&lt;/p&gt;\n\n&lt;p&gt;else:&lt;/p&gt;\n\n&lt;p&gt;diff_state += f&amp;quot;✗{current} &amp;quot;&lt;/p&gt;\n\n&lt;p&gt;diff_state += &amp;quot;\\n&amp;quot;&lt;/p&gt;\n\n&lt;p&gt;return diff_state&lt;/p&gt;\n\n&lt;p&gt;def move_up(self):&lt;/p&gt;\n\n&lt;p&gt;itemindex = np.where(self.state == 0)&lt;/p&gt;\n\n&lt;p&gt;pos_row = int(itemindex[0][0])&lt;/p&gt;\n\n&lt;p&gt;pos_col = int(itemindex[1][0])&lt;/p&gt;\n\n&lt;p&gt;if (pos_row == 0):&lt;/p&gt;\n\n&lt;p&gt;return&lt;/p&gt;\n\n&lt;p&gt;temp = self.state[pos_row, pos_col]&lt;/p&gt;\n\n&lt;p&gt;self.state[pos_row, pos_col] = self.state[pos_row-1, pos_col]&lt;/p&gt;\n\n&lt;p&gt;self.state[pos_row-1, pos_col] = temp&lt;/p&gt;\n\n&lt;p&gt;def move_down(self):&lt;/p&gt;\n\n&lt;p&gt;itemindex = np.where(self.state == 0)&lt;/p&gt;\n\n&lt;p&gt;pos_row = int(itemindex[0][0])&lt;/p&gt;\n\n&lt;p&gt;pos_col = int(itemindex[1][0])&lt;/p&gt;\n\n&lt;p&gt;if (pos_row == (self.size-1)):&lt;/p&gt;\n\n&lt;p&gt;return&lt;/p&gt;\n\n&lt;p&gt;temp = self.state[pos_row, pos_col]&lt;/p&gt;\n\n&lt;p&gt;self.state[pos_row, pos_col] = self.state[pos_row+1, pos_col]&lt;/p&gt;\n\n&lt;p&gt;self.state[pos_row+1, pos_col] = temp&lt;/p&gt;\n\n&lt;p&gt;def move_left(self):&lt;/p&gt;\n\n&lt;p&gt;itemindex = np.where(self.state == 0)&lt;/p&gt;\n\n&lt;p&gt;pos_row = int(itemindex[0][0])&lt;/p&gt;\n\n&lt;p&gt;pos_col = int(itemindex[1][0])&lt;/p&gt;\n\n&lt;p&gt;if (pos_col == 0):&lt;/p&gt;\n\n&lt;p&gt;return&lt;/p&gt;\n\n&lt;p&gt;temp = self.state[pos_row, pos_col]&lt;/p&gt;\n\n&lt;p&gt;self.state[pos_row, pos_col] = self.state[pos_row, pos_col-1]&lt;/p&gt;\n\n&lt;p&gt;self.state[pos_row, pos_col-1] = temp&lt;/p&gt;\n\n&lt;p&gt;def move_right(self):&lt;/p&gt;\n\n&lt;p&gt;itemindex = np.where(self.state == 0)&lt;/p&gt;\n\n&lt;p&gt;pos_row = int(itemindex[0][0])&lt;/p&gt;\n\n&lt;p&gt;pos_col = int(itemindex[1][0])&lt;/p&gt;\n\n&lt;p&gt;if (pos_col == (self.size-1)):&lt;/p&gt;\n\n&lt;p&gt;return&lt;/p&gt;\n\n&lt;p&gt;temp = self.state[pos_row, pos_col]&lt;/p&gt;\n\n&lt;p&gt;self.state[pos_row, pos_col] = self.state[pos_row, pos_col+1]&lt;/p&gt;\n\n&lt;p&gt;self.state[pos_row, pos_col+1] = temp&lt;/p&gt;\n\n&lt;p&gt;# 8-puzzle&lt;/p&gt;\n\n&lt;p&gt;# start = np.array([&lt;/p&gt;\n\n&lt;p&gt;# [0, 1, 3],&lt;/p&gt;\n\n&lt;p&gt;# [4, 2, 5],&lt;/p&gt;\n\n&lt;p&gt;# [7, 8, 6],&lt;/p&gt;\n\n&lt;p&gt;# ])&lt;/p&gt;\n\n&lt;p&gt;# goal = np.array([&lt;/p&gt;\n\n&lt;p&gt;# [1, 2, 3],&lt;/p&gt;\n\n&lt;p&gt;# [4, 5, 6],&lt;/p&gt;\n\n&lt;p&gt;# [7, 8, 0],&lt;/p&gt;\n\n&lt;p&gt;# ])&lt;/p&gt;\n\n&lt;p&gt;# 15-puzzle&lt;/p&gt;\n\n&lt;p&gt;start = np.array([&lt;/p&gt;\n\n&lt;p&gt;[ 6, 13,  7, 10],&lt;/p&gt;\n\n&lt;p&gt;[ 8,  9, 11,  0],&lt;/p&gt;\n\n&lt;p&gt;[15,  2, 12,  5],&lt;/p&gt;\n\n&lt;p&gt;[14,  3,  1,  4],&lt;/p&gt;\n\n&lt;p&gt;])&lt;/p&gt;\n\n&lt;p&gt;goal = np.array([&lt;/p&gt;\n\n&lt;p&gt;[ 1,  2,  3,  4],&lt;/p&gt;\n\n&lt;p&gt;[ 5,  6,  7,  8],&lt;/p&gt;\n\n&lt;p&gt;[ 9, 10, 11, 12],&lt;/p&gt;\n\n&lt;p&gt;[13, 14, 15,  0],&lt;/p&gt;\n\n&lt;p&gt;])&lt;/p&gt;\n\n&lt;p&gt;game_state = GameState(start, goal)&lt;/p&gt;\n\n&lt;p&gt;# &lt;a href=\"/u/agent\"&gt;u/agent&lt;/a&gt;.tool_plain&lt;/p&gt;\n\n&lt;p&gt;# def check_finished() -&amp;gt; bool:&lt;/p&gt;\n\n&lt;p&gt;# &amp;quot;&amp;quot;&amp;quot;Check whether or not the game state has reached the goal. Returns a boolean value&amp;quot;&amp;quot;&amp;quot;&lt;/p&gt;\n\n&lt;p&gt;# print(f&amp;quot;CALL TOOL: {inspect.currentframe().f_code.co_name}&amp;quot;)&lt;/p&gt;\n\n&lt;p&gt;# return game_state.finished()&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"/u/agent\"&gt;u/agent&lt;/a&gt;.tool_plain&lt;/p&gt;\n\n&lt;p&gt;def move_up():&lt;/p&gt;\n\n&lt;p&gt;&amp;quot;&amp;quot;&amp;quot;Move the &amp;#39;_&amp;#39; tile up by one block, swapping the tile with the number above. Returns the text describing the new game state after moving up.&amp;quot;&amp;quot;&amp;quot;&lt;/p&gt;\n\n&lt;p&gt;print(f&amp;quot;CALL TOOL: {inspect.currentframe().f_code.co_name}&amp;quot;)&lt;/p&gt;\n\n&lt;p&gt;game_state.move_up()&lt;/p&gt;\n\n&lt;p&gt;return game_state.print_state(no_print=True)&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"/u/agent\"&gt;u/agent&lt;/a&gt;.tool_plain    &lt;/p&gt;\n\n&lt;p&gt;def move_down():&lt;/p&gt;\n\n&lt;p&gt;&amp;quot;&amp;quot;&amp;quot;Move the &amp;#39;_&amp;#39; tile down by one block, swapping the tile with the number below. Returns the text describing the new game state after moving down.&amp;quot;&amp;quot;&amp;quot;&lt;/p&gt;\n\n&lt;p&gt;print(f&amp;quot;CALL TOOL: {inspect.currentframe().f_code.co_name}&amp;quot;)&lt;/p&gt;\n\n&lt;p&gt;game_state.move_down()&lt;/p&gt;\n\n&lt;p&gt;return game_state.print_state(no_print=True)&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"/u/agent\"&gt;u/agent&lt;/a&gt;.tool_plain    &lt;/p&gt;\n\n&lt;p&gt;def move_left():&lt;/p&gt;\n\n&lt;p&gt;&amp;quot;&amp;quot;&amp;quot;Move the &amp;#39;_&amp;#39; tile left by one block, swapping the tile with the number to the left. Returns the text describing the new game state after moving left.&amp;quot;&amp;quot;&amp;quot;&lt;/p&gt;\n\n&lt;p&gt;print(f&amp;quot;CALL TOOL: {inspect.currentframe().f_code.co_name}&amp;quot;)&lt;/p&gt;\n\n&lt;p&gt;game_state.move_left()&lt;/p&gt;\n\n&lt;p&gt;return game_state.print_state(no_print=True)&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"/u/agent\"&gt;u/agent&lt;/a&gt;.tool_plain   &lt;/p&gt;\n\n&lt;p&gt;def move_right():&lt;/p&gt;\n\n&lt;p&gt;&amp;quot;&amp;quot;&amp;quot;Move the &amp;#39;_&amp;#39; tile right by one block, swapping the tile with the number to the right. Returns the text describing the new game state after moving right.&amp;quot;&amp;quot;&amp;quot;&lt;/p&gt;\n\n&lt;p&gt;print(f&amp;quot;CALL TOOL: {inspect.currentframe().f_code.co_name}&amp;quot;)&lt;/p&gt;\n\n&lt;p&gt;game_state.move_right()&lt;/p&gt;\n\n&lt;p&gt;return game_state.print_state(no_print=True)&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"/u/agent\"&gt;u/agent&lt;/a&gt;.tool_plain&lt;/p&gt;\n\n&lt;p&gt;def print_state():&lt;/p&gt;\n\n&lt;p&gt;&amp;quot;&amp;quot;&amp;quot;Print the current game state.&amp;quot;&amp;quot;&amp;quot;&lt;/p&gt;\n\n&lt;p&gt;print(f&amp;quot;CALL TOOL: {inspect.currentframe().f_code.co_name}&amp;quot;)&lt;/p&gt;\n\n&lt;p&gt;return game_state.print_state(no_print=True)&lt;/p&gt;\n\n&lt;p&gt;def main():&lt;/p&gt;\n\n&lt;p&gt;max_elem = np.max(goal)&lt;/p&gt;\n\n&lt;p&gt;n_digit = get_n_digit(max_elem)&lt;/p&gt;\n\n&lt;p&gt;size = goal.shape[0]&lt;/p&gt;\n\n&lt;p&gt;goal_text = &amp;quot;&amp;quot;&lt;/p&gt;\n\n&lt;p&gt;# tool_list = [move_up, move_down, move_left, move_right]&lt;/p&gt;\n\n&lt;p&gt;for row_idx in range(size):&lt;/p&gt;\n\n&lt;p&gt;for col_idx in range(size):&lt;/p&gt;\n\n&lt;p&gt;if int(goal[row_idx, col_idx]) != 0:&lt;/p&gt;\n\n&lt;p&gt;text = &amp;#39;{num:0{width}} &amp;#39;.format(num=goal[row_idx, col_idx], width=n_digit)&lt;/p&gt;\n\n&lt;p&gt;else:                    &lt;/p&gt;\n\n&lt;p&gt;text = &amp;quot;_&amp;quot; * (n_digit) + &amp;quot; &amp;quot;&lt;/p&gt;\n\n&lt;p&gt;goal_text += text&lt;/p&gt;\n\n&lt;p&gt;goal_text += &amp;quot;\\n&amp;quot;&lt;/p&gt;\n\n&lt;p&gt;state_text = game_state.print_state()&lt;/p&gt;\n\n&lt;p&gt;dice_result = agent.run_sync(f&amp;quot;&amp;quot;&amp;quot;&lt;/p&gt;\n\n&lt;p&gt;You are an N-puzzle solver. &lt;/p&gt;\n\n&lt;p&gt;You need to find moves to go from the current state to the goal, such that all positions in current state are the same as the goal. At each turn, you can either move up, move down, move left, or move right. &lt;/p&gt;\n\n&lt;p&gt;When you move the tile, the position of the tile will be swapped with the number at the place where you move to. &lt;/p&gt;\n\n&lt;p&gt;In the final answer, output the LIST OF MOVES, which should be either: move_left, move_right, move_up or move_down.&lt;/p&gt;\n\n&lt;p&gt;CURRENT STATE:&lt;/p&gt;\n\n&lt;p&gt;{state_text}&lt;/p&gt;\n\n&lt;p&gt;GOAL STATE:&lt;/p&gt;\n\n&lt;p&gt;{goal_text}&lt;/p&gt;\n\n&lt;p&gt;EXAMPLE_OUTPUT (the &amp;quot;FINAL ANSWER&amp;quot; section):&lt;/p&gt;\n\n&lt;p&gt;move_left, move_right, move_up, move_down&lt;/p&gt;\n\n&lt;p&gt;&amp;quot;&amp;quot;&amp;quot;, &lt;/p&gt;\n\n&lt;p&gt;deps=&amp;#39;Anne&amp;#39;)&lt;/p&gt;\n\n&lt;p&gt;pprint(dice_result.output)&lt;/p&gt;\n\n&lt;p&gt;pprint(dice_result.all_messages())&lt;/p&gt;\n\n&lt;p&gt;if __name__ == &amp;quot;__main__&amp;quot;:&lt;/p&gt;\n\n&lt;p&gt;main()&lt;/p&gt;\n\n&lt;p&gt;When I tried on 8-puzzle (N=3), then the agent worked well. An example is here:&lt;/p&gt;\n\n&lt;p&gt;# 8-puzzle&lt;/p&gt;\n\n&lt;p&gt;start = np.array([&lt;/p&gt;\n\n&lt;p&gt;[0, 1, 3],&lt;/p&gt;\n\n&lt;p&gt;[4, 2, 5],&lt;/p&gt;\n\n&lt;p&gt;[7, 8, 6],&lt;/p&gt;\n\n&lt;p&gt;])&lt;/p&gt;\n\n&lt;p&gt;goal = np.array([&lt;/p&gt;\n\n&lt;p&gt;[1, 2, 3],&lt;/p&gt;\n\n&lt;p&gt;[4, 5, 6],&lt;/p&gt;\n\n&lt;p&gt;[7, 8, 0],&lt;/p&gt;\n\n&lt;p&gt;])&lt;/p&gt;\n\n&lt;p&gt;I used Qwen3:latest from Ollama as the LLM, on my laptop with 8GB GPU. I tried other models such as Gemma3 but the performance wasn&amp;#39;t good (I tried on a separate code which doesn&amp;#39;t use Pydantic AI but instead uses LLM to answer in predetermined format and from that call the functions in that format, because I was trying to learn how AI agents work under the hood, thing is each model had different outputs so really hard to do that). The outputs showed that the agent did call tools:&lt;/p&gt;\n\n&lt;p&gt;[&lt;a href=\"https://pastebin.com/m0U2E66w%5C%5D(https://pastebin.com/m0U2E66w)\"&gt;https://pastebin.com/m0U2E66w\\](https://pastebin.com/m0U2E66w)&lt;/a&gt;  &lt;/p&gt;\n\n&lt;p&gt;However, on 15-puzzle (N=3), the agent could not work at all, it completely failed to call any tool whatsoever.&lt;/p&gt;\n\n&lt;p&gt;[&lt;a href=\"https://pastebin.com/yqM6YZuq%5C%5D(https://pastebin.com/yqM6YZuq)\"&gt;https://pastebin.com/yqM6YZuq\\](https://pastebin.com/yqM6YZuq)&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;Does anyone know how to fix this ? I am still learning to would appreciate any resources, papers, tutorials, etc. which you guys point to. Thank you!&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
            "likes": null,
            "suggested_sort": null,
            "banned_at_utc": null,
            "view_count": null,
            "archived": false,
            "no_follow": true,
            "is_crosspostable": false,
            "pinned": false,
            "over_18": false,
            "all_awardings": [],
            "awarders": [],
            "media_only": false,
            "link_flair_template_id": "2c9831e6-bf92-11ed-98e6-d2b8bcc02ae1",
            "can_gild": false,
            "spoiler": false,
            "locked": false,
            "author_flair_text": null,
            "treatment_tags": [],
            "visited": false,
            "removed_by": null,
            "num_reports": null,
            "distinguished": null,
            "subreddit_id": "t5_81eyvm",
            "author_is_blocked": false,
            "mod_reason_by": null,
            "removal_reason": null,
            "link_flair_background_color": "#5a74cc",
            "id": "1lxtivp",
            "is_robot_indexable": true,
            "num_duplicates": 0,
            "report_reasons": null,
            "author": "CommunityOpposite645",
            "discussion_type": null,
            "num_comments": 3,
            "send_replies": true,
            "media": null,
            "contest_mode": false,
            "author_patreon_flair": false,
            "author_flair_text_color": null,
            "permalink": "/r/LocalLLaMA/comments/1lxtivp/trying_to_use_ai_agent_to_play_npuzzle_but_the/",
            "stickied": false,
            "url": "https://www.reddit.com/r/LocalLLaMA/comments/1lxtivp/trying_to_use_ai_agent_to_play_npuzzle_but_the/",
            "subreddit_subscribers": 498114,
            "created_utc": 1752301446,
            "num_crossposts": 0,
            "mod_reports": [],
            "is_video": false
          }
        }
      ],
      "before": null
    }
  },
  {
    "kind": "Listing",
    "data": {
      "after": null,
      "dist": null,
      "modhash": "",
      "geo_filter": "",
      "children": [
        {
          "kind": "t1",
          "data": {
            "subreddit_id": "t5_81eyvm",
            "approved_at_utc": null,
            "author_is_blocked": false,
            "comment_type": null,
            "awarders": [],
            "mod_reason_by": null,
            "banned_by": null,
            "author_flair_type": "text",
            "total_awards_received": 0,
            "subreddit": "LocalLLaMA",
            "author_flair_template_id": null,
            "likes": null,
            "replies": {
              "kind": "Listing",
              "data": {
                "after": null,
                "dist": null,
                "modhash": "",
                "geo_filter": "",
                "children": [
                  {
                    "kind": "t1",
                    "data": {
                      "subreddit_id": "t5_81eyvm",
                      "approved_at_utc": null,
                      "author_is_blocked": false,
                      "comment_type": null,
                      "awarders": [],
                      "mod_reason_by": null,
                      "banned_by": null,
                      "author_flair_type": "text",
                      "total_awards_received": 0,
                      "subreddit": "LocalLLaMA",
                      "author_flair_template_id": null,
                      "likes": null,
                      "replies": {
                        "kind": "Listing",
                        "data": {
                          "after": null,
                          "dist": null,
                          "modhash": "",
                          "geo_filter": "",
                          "children": [
                            {
                              "kind": "t1",
                              "data": {
                                "subreddit_id": "t5_81eyvm",
                                "approved_at_utc": null,
                                "author_is_blocked": false,
                                "comment_type": null,
                                "awarders": [],
                                "mod_reason_by": null,
                                "banned_by": null,
                                "author_flair_type": "text",
                                "total_awards_received": 0,
                                "subreddit": "LocalLLaMA",
                                "author_flair_template_id": null,
                                "likes": null,
                                "replies": "",
                                "user_reports": [],
                                "saved": false,
                                "id": "n2r49rm",
                                "banned_at_utc": null,
                                "mod_reason_title": null,
                                "gilded": 0,
                                "archived": false,
                                "collapsed_reason_code": null,
                                "no_follow": true,
                                "author": "Marksta",
                                "can_mod_post": false,
                                "send_replies": true,
                                "parent_id": "t1_n2qwk63",
                                "score": 0,
                                "author_fullname": "t2_559a1",
                                "removal_reason": null,
                                "approved_by": null,
                                "mod_note": null,
                                "all_awardings": [],
                                "body": "Yeah, you can just grab it from the github releases section,read the file names to make sure you get the right one for your system. https://github.com/ggml-org/llama.cpp/releases\n\nAlternatively check out LM Studio, it's llama.cpp but with training wheels and a nice GUI. Some similar issues that maybe it does things for you so you don't learn, but they have an advanced tab to let you dial all the settings for llama.cpp that you can learn from too. https://lmstudio.ai/",
                                "edited": false,
                                "top_awarded_type": null,
                                "downs": 0,
                                "author_flair_css_class": null,
                                "name": "t1_n2r49rm",
                                "is_submitter": false,
                                "collapsed": false,
                                "author_flair_richtext": [],
                                "author_patreon_flair": false,
                                "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Yeah, you can just grab it from the github releases section,read the file names to make sure you get the right one for your system. &lt;a href=\"https://github.com/ggml-org/llama.cpp/releases\"&gt;https://github.com/ggml-org/llama.cpp/releases&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;Alternatively check out LM Studio, it&amp;#39;s llama.cpp but with training wheels and a nice GUI. Some similar issues that maybe it does things for you so you don&amp;#39;t learn, but they have an advanced tab to let you dial all the settings for llama.cpp that you can learn from too. &lt;a href=\"https://lmstudio.ai/\"&gt;https://lmstudio.ai/&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;",
                                "gildings": {},
                                "collapsed_reason": null,
                                "distinguished": null,
                                "associated_award": null,
                                "stickied": false,
                                "author_premium": false,
                                "can_gild": false,
                                "link_id": "t3_1lxtivp",
                                "unrepliable_reason": null,
                                "author_flair_text_color": null,
                                "score_hidden": false,
                                "permalink": "/r/LocalLLaMA/comments/1lxtivp/trying_to_use_ai_agent_to_play_npuzzle_but_the/n2r49rm/",
                                "subreddit_type": "public",
                                "locked": false,
                                "report_reasons": null,
                                "created": 1752338730,
                                "author_flair_text": null,
                                "treatment_tags": [],
                                "created_utc": 1752338730,
                                "subreddit_name_prefixed": "r/LocalLLaMA",
                                "controversiality": 0,
                                "depth": 2,
                                "author_flair_background_color": null,
                                "collapsed_because_crowd_control": null,
                                "mod_reports": [],
                                "num_reports": null,
                                "ups": 0
                              }
                            }
                          ],
                          "before": null
                        }
                      },
                      "user_reports": [],
                      "saved": false,
                      "id": "n2qwk63",
                      "banned_at_utc": null,
                      "mod_reason_title": null,
                      "gilded": 0,
                      "archived": false,
                      "collapsed_reason_code": null,
                      "no_follow": true,
                      "author": "CommunityOpposite645",
                      "can_mod_post": false,
                      "created_utc": 1752336315,
                      "send_replies": true,
                      "parent_id": "t1_n2qtaf3",
                      "score": 1,
                      "author_fullname": "t2_t6pzf08p",
                      "removal_reason": null,
                      "approved_by": null,
                      "mod_note": null,
                      "all_awardings": [],
                      "body": "Hi, let me try llama.cpp, I don't know about Ollama's failings to be honest, do you have any links for this ? Thank you.",
                      "edited": false,
                      "top_awarded_type": null,
                      "author_flair_css_class": null,
                      "name": "t1_n2qwk63",
                      "is_submitter": true,
                      "downs": 0,
                      "author_flair_richtext": [],
                      "author_patreon_flair": false,
                      "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Hi, let me try llama.cpp, I don&amp;#39;t know about Ollama&amp;#39;s failings to be honest, do you have any links for this ? Thank you.&lt;/p&gt;\n&lt;/div&gt;",
                      "gildings": {},
                      "collapsed_reason": null,
                      "distinguished": null,
                      "associated_award": null,
                      "stickied": false,
                      "author_premium": false,
                      "can_gild": false,
                      "link_id": "t3_1lxtivp",
                      "unrepliable_reason": null,
                      "author_flair_text_color": null,
                      "score_hidden": false,
                      "permalink": "/r/LocalLLaMA/comments/1lxtivp/trying_to_use_ai_agent_to_play_npuzzle_but_the/n2qwk63/",
                      "subreddit_type": "public",
                      "locked": false,
                      "report_reasons": null,
                      "created": 1752336315,
                      "author_flair_text": null,
                      "treatment_tags": [],
                      "collapsed": false,
                      "subreddit_name_prefixed": "r/LocalLLaMA",
                      "controversiality": 0,
                      "depth": 1,
                      "author_flair_background_color": null,
                      "collapsed_because_crowd_control": null,
                      "mod_reports": [],
                      "num_reports": null,
                      "ups": 1
                    }
                  }
                ],
                "before": null
              }
            },
            "user_reports": [],
            "saved": false,
            "id": "n2qtaf3",
            "banned_at_utc": null,
            "mod_reason_title": null,
            "gilded": 0,
            "archived": false,
            "collapsed_reason_code": null,
            "no_follow": true,
            "author": "Marksta",
            "can_mod_post": false,
            "created_utc": 1752335300,
            "send_replies": true,
            "parent_id": "t3_1lxtivp",
            "score": 2,
            "author_fullname": "t2_559a1",
            "approved_by": null,
            "mod_note": null,
            "all_awardings": [],
            "collapsed": false,
            "body": "Ollama context window defaults are messing you up bro. The more complex puzzle requires more tokens to solve and the model is running out of available context to figure it out. Once a model hits their context window's limit, they go batshit insane because the first thing they forget is your instructions you gave. All it knows is it was solving something but forgot the rules to even know how to solve it and will eventually just spit out jibberish or spam the same token over and over again until you pull the plug.\n\nDitch Ollama and use llama.cpp directly, this is a known built in gotcha that ruins every newbies day.",
            "edited": false,
            "top_awarded_type": null,
            "author_flair_css_class": null,
            "name": "t1_n2qtaf3",
            "is_submitter": false,
            "downs": 0,
            "author_flair_richtext": [],
            "author_patreon_flair": false,
            "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Ollama context window defaults are messing you up bro. The more complex puzzle requires more tokens to solve and the model is running out of available context to figure it out. Once a model hits their context window&amp;#39;s limit, they go batshit insane because the first thing they forget is your instructions you gave. All it knows is it was solving something but forgot the rules to even know how to solve it and will eventually just spit out jibberish or spam the same token over and over again until you pull the plug.&lt;/p&gt;\n\n&lt;p&gt;Ditch Ollama and use llama.cpp directly, this is a known built in gotcha that ruins every newbies day.&lt;/p&gt;\n&lt;/div&gt;",
            "removal_reason": null,
            "collapsed_reason": null,
            "distinguished": null,
            "associated_award": null,
            "stickied": false,
            "author_premium": false,
            "can_gild": false,
            "gildings": {},
            "unrepliable_reason": null,
            "author_flair_text_color": null,
            "score_hidden": false,
            "permalink": "/r/LocalLLaMA/comments/1lxtivp/trying_to_use_ai_agent_to_play_npuzzle_but_the/n2qtaf3/",
            "subreddit_type": "public",
            "locked": false,
            "report_reasons": null,
            "created": 1752335300,
            "author_flair_text": null,
            "treatment_tags": [],
            "link_id": "t3_1lxtivp",
            "subreddit_name_prefixed": "r/LocalLLaMA",
            "controversiality": 0,
            "depth": 0,
            "author_flair_background_color": null,
            "collapsed_because_crowd_control": null,
            "mod_reports": [],
            "num_reports": null,
            "ups": 2
          }
        }
      ],
      "before": null
    }
  }
]
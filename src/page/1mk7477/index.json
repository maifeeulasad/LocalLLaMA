[
  {
    "kind": "Listing",
    "data": {
      "after": null,
      "dist": 1,
      "modhash": "",
      "geo_filter": "",
      "children": [
        {
          "kind": "t3",
          "data": {
            "approved_at_utc": null,
            "subreddit": "LocalLLaMA",
            "selftext": "Hi all,\n\nI'm currently building an evaluation and data curation pipeline in the medical domain, specifically focused on cancer-related reports such as radiology and CT scan summaries. The goal is to extract structured clinical insights like progression status, metastasis presence, and tumor size changes.\n\nCurrent Setup\n\nModels in use:\n\nLLaMA 3.2 8B fine-tuned using LoRA on custom medical data.(Very few samples 1000 per entity)\nNEMOTRON 49B, used as a strong base model (not fine-tuned).\n\nEach model produces:\n\nA reasoning trace (explaining the decision-making process).\nA structured JSON output with fields such as:\nprogression_status\nmetastasis\ntumor_size_change\n\nWe also have ground-truth outputs (created by medical curators) for comparison.(Only for few hundreds)\n\n\nWhat I'm Trying to Build\n\nI'm looking to automate the evaluation process and reduce human dependency.\n\n Specifically, I want to:\n\nEvaluate both the reasoning trace and JSON correctness against llama generated response with the help of nemotron as a parent.\n\nUse DSPy’s context engineering to create a model-based evaluator that outputs:\nA reasoning quality score (e.g., scale of 1–5)\nA binary or detailed comparison of JSON accuracy\nComments on incorrect fields\n\nCompare performance between LLaMA and NEMOTRON across a dataset.\n\nMost importantly, I want to use the parent model (NEMOTRON) to provide feedback on the fine-tuned model (LLaMA) responses — and eventually use this feedback to build more reliable training data.\n\nWhat I’m Exploring\n\nUsing DSPy with a custom signature that inputs: prompt, reasoning, model JSON, and ground-truth JSON.\n\nBuilding a Chain-of-Thought evaluator that assesses reasoning and JSON output jointly.\n\nAutomating comparison of field-level accuracy between predicted JSON and ground truth.\n\nStoring evaluation results (scores, errors, comments) for model debugging and re-training.\n\n\nQuestions\n\nHas anyone used DSPy (or other frameworks) to evaluate both structured outputs and natural language reasoning?\n\nWhat’s a good way to make JSON comparison interpretable and robust for medical fields?\n\nHow can I best use the base model’s evaluations (NEMOTRON) as feedback for improving or filtering fine-tuned data?\n\nAre there any better alternatives to DSPy for this specific use case?\n\nHow do you track and score reasoning traces reliably in automated pipelines?\n\n\nIf anyone has worked on similar pipelines- especially in clinical NLP or structured extraction tasks, I’d really appreciate your insights.",
            "user_reports": [],
            "saved": false,
            "mod_reason_title": null,
            "gilded": 0,
            "clicked": false,
            "title": "Automating LLM Evaluation in the Medical Domain (Cancer Reports) – Seeking Advice on JSON + Reasoning Validation and Data Reliability",
            "link_flair_richtext": [
              {
                "e": "text",
                "t": "Question | Help"
              }
            ],
            "subreddit_name_prefixed": "r/LocalLLaMA",
            "hidden": false,
            "pwls": 6,
            "link_flair_css_class": "",
            "downs": 0,
            "thumbnail_height": null,
            "top_awarded_type": null,
            "hide_score": false,
            "name": "t3_1mk7477",
            "quarantine": false,
            "link_flair_text_color": "dark",
            "upvote_ratio": 0.6,
            "author_flair_background_color": null,
            "subreddit_type": "public",
            "ups": 1,
            "total_awards_received": 0,
            "media_embed": {},
            "thumbnail_width": null,
            "author_flair_template_id": null,
            "is_original_content": false,
            "author_fullname": "t2_gsyxhako0",
            "secure_media": null,
            "is_reddit_media_domain": false,
            "is_meta": false,
            "category": null,
            "secure_media_embed": {},
            "link_flair_text": "Question | Help",
            "can_mod_post": false,
            "score": 1,
            "approved_by": null,
            "is_created_from_ads_ui": false,
            "author_premium": false,
            "thumbnail": "self",
            "edited": false,
            "author_flair_css_class": null,
            "author_flair_richtext": [],
            "gildings": {},
            "content_categories": null,
            "is_self": true,
            "mod_note": null,
            "created": 1754589439,
            "link_flair_type": "richtext",
            "wls": 6,
            "removed_by_category": null,
            "banned_by": null,
            "author_flair_type": "text",
            "domain": "self.LocalLLaMA",
            "allow_live_comments": false,
            "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Hi all,&lt;/p&gt;\n\n&lt;p&gt;I&amp;#39;m currently building an evaluation and data curation pipeline in the medical domain, specifically focused on cancer-related reports such as radiology and CT scan summaries. The goal is to extract structured clinical insights like progression status, metastasis presence, and tumor size changes.&lt;/p&gt;\n\n&lt;p&gt;Current Setup&lt;/p&gt;\n\n&lt;p&gt;Models in use:&lt;/p&gt;\n\n&lt;p&gt;LLaMA 3.2 8B fine-tuned using LoRA on custom medical data.(Very few samples 1000 per entity)\nNEMOTRON 49B, used as a strong base model (not fine-tuned).&lt;/p&gt;\n\n&lt;p&gt;Each model produces:&lt;/p&gt;\n\n&lt;p&gt;A reasoning trace (explaining the decision-making process).\nA structured JSON output with fields such as:\nprogression_status\nmetastasis\ntumor_size_change&lt;/p&gt;\n\n&lt;p&gt;We also have ground-truth outputs (created by medical curators) for comparison.(Only for few hundreds)&lt;/p&gt;\n\n&lt;p&gt;What I&amp;#39;m Trying to Build&lt;/p&gt;\n\n&lt;p&gt;I&amp;#39;m looking to automate the evaluation process and reduce human dependency.&lt;/p&gt;\n\n&lt;p&gt;Specifically, I want to:&lt;/p&gt;\n\n&lt;p&gt;Evaluate both the reasoning trace and JSON correctness against llama generated response with the help of nemotron as a parent.&lt;/p&gt;\n\n&lt;p&gt;Use DSPy’s context engineering to create a model-based evaluator that outputs:\nA reasoning quality score (e.g., scale of 1–5)\nA binary or detailed comparison of JSON accuracy\nComments on incorrect fields&lt;/p&gt;\n\n&lt;p&gt;Compare performance between LLaMA and NEMOTRON across a dataset.&lt;/p&gt;\n\n&lt;p&gt;Most importantly, I want to use the parent model (NEMOTRON) to provide feedback on the fine-tuned model (LLaMA) responses — and eventually use this feedback to build more reliable training data.&lt;/p&gt;\n\n&lt;p&gt;What I’m Exploring&lt;/p&gt;\n\n&lt;p&gt;Using DSPy with a custom signature that inputs: prompt, reasoning, model JSON, and ground-truth JSON.&lt;/p&gt;\n\n&lt;p&gt;Building a Chain-of-Thought evaluator that assesses reasoning and JSON output jointly.&lt;/p&gt;\n\n&lt;p&gt;Automating comparison of field-level accuracy between predicted JSON and ground truth.&lt;/p&gt;\n\n&lt;p&gt;Storing evaluation results (scores, errors, comments) for model debugging and re-training.&lt;/p&gt;\n\n&lt;p&gt;Questions&lt;/p&gt;\n\n&lt;p&gt;Has anyone used DSPy (or other frameworks) to evaluate both structured outputs and natural language reasoning?&lt;/p&gt;\n\n&lt;p&gt;What’s a good way to make JSON comparison interpretable and robust for medical fields?&lt;/p&gt;\n\n&lt;p&gt;How can I best use the base model’s evaluations (NEMOTRON) as feedback for improving or filtering fine-tuned data?&lt;/p&gt;\n\n&lt;p&gt;Are there any better alternatives to DSPy for this specific use case?&lt;/p&gt;\n\n&lt;p&gt;How do you track and score reasoning traces reliably in automated pipelines?&lt;/p&gt;\n\n&lt;p&gt;If anyone has worked on similar pipelines- especially in clinical NLP or structured extraction tasks, I’d really appreciate your insights.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
            "likes": null,
            "suggested_sort": null,
            "banned_at_utc": null,
            "view_count": null,
            "archived": false,
            "no_follow": true,
            "is_crosspostable": false,
            "pinned": false,
            "over_18": false,
            "all_awardings": [],
            "awarders": [],
            "media_only": false,
            "link_flair_template_id": "2c9831e6-bf92-11ed-98e6-d2b8bcc02ae1",
            "can_gild": false,
            "spoiler": false,
            "locked": false,
            "author_flair_text": null,
            "treatment_tags": [],
            "visited": false,
            "removed_by": null,
            "num_reports": null,
            "distinguished": null,
            "subreddit_id": "t5_81eyvm",
            "author_is_blocked": false,
            "mod_reason_by": null,
            "removal_reason": null,
            "link_flair_background_color": "#5a74cc",
            "id": "1mk7477",
            "is_robot_indexable": true,
            "num_duplicates": 1,
            "report_reasons": null,
            "author": "Karam1234098",
            "discussion_type": null,
            "num_comments": 0,
            "send_replies": true,
            "media": null,
            "contest_mode": false,
            "author_patreon_flair": false,
            "author_flair_text_color": null,
            "permalink": "/r/LocalLLaMA/comments/1mk7477/automating_llm_evaluation_in_the_medical_domain/",
            "stickied": false,
            "url": "https://www.reddit.com/r/LocalLLaMA/comments/1mk7477/automating_llm_evaluation_in_the_medical_domain/",
            "subreddit_subscribers": 513417,
            "created_utc": 1754589439,
            "num_crossposts": 0,
            "mod_reports": [],
            "is_video": false
          }
        }
      ],
      "before": null
    }
  },
  {
    "kind": "Listing",
    "data": {
      "after": null,
      "dist": null,
      "modhash": "",
      "geo_filter": "",
      "children": [],
      "before": null
    }
  }
]
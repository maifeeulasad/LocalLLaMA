[
  {
    "kind": "Listing",
    "data": {
      "after": null,
      "dist": 1,
      "modhash": "",
      "geo_filter": "",
      "children": [
        {
          "kind": "t3",
          "data": {
            "approved_at_utc": null,
            "subreddit": "LocalLLaMA",
            "selftext": "Hi everyone,\n\nWe’ve been experimenting with a prompt optimization strategy for local LLM agents that dramatically reduces prompt size without compromising output quality.\n\nThe problem:\n\nWhen building multi-functional agents (especially using Local LLaMA or Mixtral), prompts tend to become bloated. This leads to:\n• High latency on CPU inference\n• Irrelevant context being injected\n• Unpredictable model behavior\n• Increased GPU memory usage (if available)\n\n\nOur approach:\n\nWe started classifying queries into semantic categories and then selecting only the relevant prompt sections based on a lightweight graph structure of relationships between prompt components.\n\nThis gave us:\n• ~55% token reduction in average prompt size\n• Faster decoding on 7B models (esp. quantized versions)\n• Easier debugging and better eval consistency\n\nInstead of feeding a monolithic prompt every time, the system dynamically builds a minimal one depending on the query.\n\n\nReal-world example:\n\nWe’ve been applying this to a side project called PromptGraph, an open-source initiative (soon to be released) that automates this workflow.\nIt’s model-agnostic and works well with local LLMs, including QLora-tuned models and GGUF-compatible backends.\n\nIf there’s interest, I’d be happy to share the structure or logic we use — or just talk shop about prompt modularization techniques.\n\n\n\nWhat do you think?\n• Has anyone here used graphs or modular prompts in your agent builds?\n• How do you handle prompt size in long-running or multi-turn conversations?\n• Would sharing the repo or an early demo here be useful?\n\nLooking forward to learning from your builds too.\n\nCheers!\n– Michael",
            "user_reports": [],
            "saved": false,
            "mod_reason_title": null,
            "gilded": 0,
            "clicked": false,
            "title": "[Prompt Optimization Strategy] How we use query classification + graph-based context selection to reduce LLM costs in local deployments",
            "link_flair_richtext": [
              {
                "e": "text",
                "t": "Discussion"
              }
            ],
            "subreddit_name_prefixed": "r/LocalLLaMA",
            "hidden": false,
            "pwls": 6,
            "link_flair_css_class": "",
            "downs": 0,
            "thumbnail_height": null,
            "top_awarded_type": null,
            "hide_score": false,
            "name": "t3_1mime87",
            "quarantine": false,
            "link_flair_text_color": "light",
            "upvote_ratio": 0.67,
            "author_flair_background_color": null,
            "subreddit_type": "public",
            "ups": 1,
            "total_awards_received": 0,
            "media_embed": {},
            "thumbnail_width": null,
            "author_flair_template_id": null,
            "is_original_content": false,
            "author_fullname": "t2_1thv6a883k",
            "secure_media": null,
            "is_reddit_media_domain": false,
            "is_meta": false,
            "category": null,
            "secure_media_embed": {},
            "link_flair_text": "Discussion",
            "can_mod_post": false,
            "score": 1,
            "approved_by": null,
            "is_created_from_ads_ui": false,
            "author_premium": false,
            "thumbnail": "default",
            "edited": false,
            "author_flair_css_class": null,
            "author_flair_richtext": [],
            "gildings": {},
            "content_categories": null,
            "is_self": false,
            "mod_note": null,
            "created": 1754430337,
            "link_flair_type": "richtext",
            "wls": 6,
            "removed_by_category": null,
            "banned_by": null,
            "author_flair_type": "text",
            "domain": "promptgraph.io",
            "allow_live_comments": false,
            "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Hi everyone,&lt;/p&gt;\n\n&lt;p&gt;We’ve been experimenting with a prompt optimization strategy for local LLM agents that dramatically reduces prompt size without compromising output quality.&lt;/p&gt;\n\n&lt;p&gt;The problem:&lt;/p&gt;\n\n&lt;p&gt;When building multi-functional agents (especially using Local LLaMA or Mixtral), prompts tend to become bloated. This leads to:\n• High latency on CPU inference\n• Irrelevant context being injected\n• Unpredictable model behavior\n• Increased GPU memory usage (if available)&lt;/p&gt;\n\n&lt;p&gt;Our approach:&lt;/p&gt;\n\n&lt;p&gt;We started classifying queries into semantic categories and then selecting only the relevant prompt sections based on a lightweight graph structure of relationships between prompt components.&lt;/p&gt;\n\n&lt;p&gt;This gave us:\n• ~55% token reduction in average prompt size\n• Faster decoding on 7B models (esp. quantized versions)\n• Easier debugging and better eval consistency&lt;/p&gt;\n\n&lt;p&gt;Instead of feeding a monolithic prompt every time, the system dynamically builds a minimal one depending on the query.&lt;/p&gt;\n\n&lt;p&gt;Real-world example:&lt;/p&gt;\n\n&lt;p&gt;We’ve been applying this to a side project called PromptGraph, an open-source initiative (soon to be released) that automates this workflow.\nIt’s model-agnostic and works well with local LLMs, including QLora-tuned models and GGUF-compatible backends.&lt;/p&gt;\n\n&lt;p&gt;If there’s interest, I’d be happy to share the structure or logic we use — or just talk shop about prompt modularization techniques.&lt;/p&gt;\n\n&lt;p&gt;What do you think?\n• Has anyone here used graphs or modular prompts in your agent builds?\n• How do you handle prompt size in long-running or multi-turn conversations?\n• Would sharing the repo or an early demo here be useful?&lt;/p&gt;\n\n&lt;p&gt;Looking forward to learning from your builds too.&lt;/p&gt;\n\n&lt;p&gt;Cheers!\n– Michael&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
            "likes": null,
            "suggested_sort": null,
            "banned_at_utc": null,
            "url_overridden_by_dest": "https://www.promptgraph.io",
            "view_count": null,
            "archived": false,
            "no_follow": true,
            "is_crosspostable": false,
            "pinned": false,
            "over_18": false,
            "all_awardings": [],
            "awarders": [],
            "media_only": false,
            "link_flair_template_id": "5f921ea4-c7bc-11ed-9c23-3a00622979b4",
            "can_gild": false,
            "spoiler": false,
            "locked": false,
            "author_flair_text": null,
            "treatment_tags": [],
            "visited": false,
            "removed_by": null,
            "num_reports": null,
            "distinguished": null,
            "subreddit_id": "t5_81eyvm",
            "author_is_blocked": false,
            "mod_reason_by": null,
            "removal_reason": null,
            "link_flair_background_color": "#646d73",
            "id": "1mime87",
            "is_robot_indexable": true,
            "num_duplicates": 1,
            "report_reasons": null,
            "author": "michael_pintos",
            "discussion_type": null,
            "num_comments": 0,
            "send_replies": true,
            "media": null,
            "contest_mode": false,
            "author_patreon_flair": false,
            "author_flair_text_color": null,
            "permalink": "/r/LocalLLaMA/comments/1mime87/prompt_optimization_strategy_how_we_use_query/",
            "stickied": false,
            "url": "https://www.promptgraph.io",
            "subreddit_subscribers": 511364,
            "created_utc": 1754430337,
            "num_crossposts": 1,
            "mod_reports": [],
            "is_video": false
          }
        }
      ],
      "before": null
    }
  },
  {
    "kind": "Listing",
    "data": {
      "after": null,
      "dist": null,
      "modhash": "",
      "geo_filter": "",
      "children": [],
      "before": null
    }
  }
]
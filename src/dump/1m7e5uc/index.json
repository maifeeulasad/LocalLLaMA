[
  {
    "kind": "Listing",
    "data": {
      "after": null,
      "dist": 1,
      "modhash": "",
      "geo_filter": "",
      "children": [
        {
          "kind": "t3",
          "data": {
            "approved_at_utc": null,
            "subreddit": "LocalLLaMA",
            "selftext": "## Preface\n\n&gt; The video is sped up; it actually takes about 20-30 minutes\n\n- Github Repository: https://github.com/wrtnlabs/autobe\n- Generation Result: https://github.com/wrtnlabs/autobe-example-bbs\n\nWe are honored to introduce [`AutoBE`](https://github.com/wrtnlabs/autobe) to you. [`AutoBE`](https://github.com/wrtnlabs/autobe) is an open-source project developed by Wrtn Technologies (Korean AI startup company), a vibe coding agent that automatically generates backend applications.\n\nOne of [`AutoBE`](https://github.com/wrtnlabs/autobe)'s key features is that it always generates code with 100% compilation success. The secret lies in our proprietary compiler system. Through our self-developed compilers, we support AI in generating type-safe code, and when AI generates incorrect code, the compiler detects it and provides detailed feedback, guiding the AI to generate correct code.\n\nThrough this approach, [`AutoBE`](https://github.com/wrtnlabs/autobe) always generates backend applications with 100% compilation success. When AI constructs AST (Abstract Syntax Tree) data through function calling, our proprietary compiler validates it, provides feedback, and ultimately generates complete source code.\n\n## Prisma DB Schema Compiler\n\nA compiler for database design.\n\n- Compiler Structures\n  - [`AutoBePrisma.IFile`](https://github.com/wrtnlabs/autobe/blob/main/packages/interface/src/prisma/AutoBePrisma.ts)\n  - [`IAutoBePrismaValidation`](https://github.com/wrtnlabs/autobe/blob/main/packages/interface/src/prisma/IAutoBePrismaValidation.ts)\n  - [`IValidation`](https://github.com/samchon/openapi/blob/master/src/structures/IValidation.ts)\n- Generation Result\n  - Prisma Schema Files: https://github.com/wrtnlabs/autobe-example-bbs/tree/main/prisma/schema\n  - ERD Documentation: https://github.com/wrtnlabs/autobe-example-bbs/blob/main/docs/ERD.md\n\n[`AutoBE`](https://github.com/wrtnlabs/autobe) utilizes a self-developed DB compiler when designing databases.\n\nFirst, it creates an AST (Abstract Syntax Tree) structure called `AutoBePrisma.IFile` through AI function calling (or structured output). Then it analyzes the data created by the AI to check for logical or type errors.\n\nIf logical errors are found, these are returned to the AI in the form of `IAutoBePrismaValidation` with detailed reasons, guiding the AI to generate correct `AutoBePrisma.IFile` data in the next function calling. Major logical error cases include:\n\n- **Duplication errors**: Duplicate definitions of filenames, model names, field names\n- **Circular references**: Cross-dependencies where two models reference each other as foreign keys\n- **Non-existent references**: Cases where foreign keys point to non-existent target models\n- **Index configuration errors**: Creating indexes on non-existent fields, duplicate index definitions\n- **Data type mismatches**: Applying GIN indexes to non-string fields\n- **Field names identical to table names**: Potential confusion due to normalization errors\n\nIf type errors are found, these are also returned to the AI in the form of `IValidation`, guiding the AI to generate data with correct types.\n\nFinally, when `AutoBePrisma.IFile` is correctly generated without any logical or type errors, it is converted to Prisma DB schema (code generation). Simultaneously, ERD (Entity Relationship Diagram) and documentation are also generated ([`prisma-markdown`](https://github.com/samchon/prisma-markdown)), helping users understand their DB design.\n\nThe generated Prisma schema files include detailed descriptive comments for each table and field. These comments go beyond simple code documentation - they are directly utilized by `prisma-markdown` when generating ERDs and documentation, becoming core content of the database design documents. Therefore, developers can clearly understand the role of each table and field not only at the code level but also through visual ERD diagrams.\n\n## OpenAPI Document Compiler\n\nA compiler for API interface design.\n\n- Compiler Structures\n  - [`AutoBeOpenApi.IDocument`](https://github.com/wrtnlabs/autobe/blob/main/packages/interface/src/openapi/AutoBeOpenApi.ts)\n  - [`IValidation`](https://github.com/samchon/openapi/blob/master/src/structures/IValidation.ts)\n- Generation Result: https://stackblitz.com/edit/njkqikge\n\n[`AutoBE`](https://github.com/wrtnlabs/autobe) utilizes a self-developed OpenAPI compiler when designing API interfaces.\n\nThis OpenAPI compiler first has an AST (Abstract Syntax Tree) structure of type `AutoBeOpenApi.IDocument`, which is created through AI function calling. Then it analyzes this data, and if logical or type errors are found, detailed reasons are returned to the AI, guiding the AI to generate correct `AutoBeOpenApi.IDocument` data.\n\nAfter the AI successfully generates a flawless `AutoBeOpenApi.IDocument`, [`AutoBE`](https://github.com/wrtnlabs/autobe) converts it to the official OpenAPI v3.1 spec [`OpenApi.IDocument`](https://github.com/samchon/openapi/blob/master/src/OpenApi.ts) structure. This is then further converted to TypeScript/NestJS source code (code generation), completing the API interface implementation.\n\nThe generated TypeScript/NestJS source code consists of API controller classes and DTO (Data Transfer Object) types, where each API controller method is a mock method that only generates random values of the specified return type using the [`typia.random&lt;T&gt;()`](https://typia.io/docs/random) function. Therefore, APIs generated by [`AutoBE`](https://github.com/wrtnlabs/autobe) don't actually function, but they complete the foundational work for API interface design and implementation.\n\nAll generated controller functions and DTO types include detailed JSDoc comments. The purpose of each API endpoint, parameter descriptions, and meanings of return values are clearly documented, making it easy for developers to understand the purpose and usage of APIs.\n\n## E2E Test Function Compiler\n\nA compiler for generating E2E test programs.\n\n- Compiler Structures\n  - [`AutoBeTest.IFunction`](https://github.com/wrtnlabs/autobe/blob/main/packages/interface/src/test/AutoBeTest.ts)\n  - [`IAutoBeTypeScriptCompileResult`](https://github.com/wrtnlabs/autobe/blob/main/packages/interface/src/compiler/IAutoBeTypeScriptCompileResult.ts)\n  - [`IValidation`](https://github.com/samchon/openapi/blob/master/src/structures/IValidation.ts)\n- Prompt Structures\n  - [`IAutoBeTestWriteApplication`](https://github.com/wrtnlabs/autobe/blob/main/packages/agent/src/orchestrate/test/structures/IAutoBeTestWriteApplication.ts#L4)\n  - [`IAutoBeTestCorrectApplication`](https://github.com/wrtnlabs/autobe/blob/main/packages/agent/src/orchestrate/test/structures/IAutoBeTestCorrectApplication.ts)\n- Generation Result: https://github.com/wrtnlabs/autobe-example-bbs\n\n[`AutoBE`](https://github.com/wrtnlabs/autobe) uses a self-developed compiler when generating E2E test code.\n\nThis E2E test compiler has an AST (Abstract Syntax Tree) structure called `AutoBeTest.IFunction`, which is constructed through AI function calling. Then it analyzes this data, and if logical or type errors are found, detailed reasons are returned to the AI, guiding the AI to generate correct `AutoBeTest.IFunction` data.\n\nAfter the AI successfully generates flawless `AutoBeTest.IFunction` data, [`AutoBE`](https://github.com/wrtnlabs/autobe) converts it to TypeScript source code (code generation). The Test agent then combines each of the generated e2e test functions with the code generated by the interface agent to complete a new backend application.\n\nWhen E2E test functions call backend server API functions, they use an SDK (Software Development Kit) generated for the backend server API to ensure type-safe API function calls.\n\nEach generated E2E test function includes detailed comments describing the test's scenario and purpose. Which APIs are called in what order, what is verified at each step, and what results are expected are clearly documented, making it easy to understand the intent of the test code.\n\n## Detailed Article\n\nhttp://wrtnlabs.io/autobe/articles/autobe-ai-friendly-compilers.html\n\nSince Reddit doesn't allow posting YouTube videos, diagrams, and image materials, I've written a detailed article separately on blog.\n\nFor those who are curious about the details, please refer to the link above.",
            "user_reports": [],
            "saved": false,
            "mod_reason_title": null,
            "gilded": 0,
            "clicked": false,
            "title": "[AutoBE] We're making AI-friendly Compilers for Vibe Coding (open source)",
            "link_flair_richtext": [
              {
                "e": "text",
                "t": "Tutorial | Guide"
              }
            ],
            "subreddit_name_prefixed": "r/LocalLLaMA",
            "hidden": false,
            "pwls": 6,
            "link_flair_css_class": "",
            "downs": 0,
            "thumbnail_height": 140,
            "top_awarded_type": null,
            "hide_score": false,
            "name": "t3_1m7e5uc",
            "quarantine": false,
            "link_flair_text_color": "light",
            "upvote_ratio": 0.83,
            "author_flair_background_color": null,
            "ups": 8,
            "total_awards_received": 0,
            "media_embed": {},
            "thumbnail_width": 140,
            "author_flair_template_id": null,
            "is_original_content": false,
            "author_fullname": "t2_1njlywuqe6",
            "secure_media": {
              "reddit_video": {
                "bitrate_kbps": 1200,
                "fallback_url": "https://v.redd.it/vpmfq4l4inef1/DASH_480.mp4?source=fallback",
                "has_audio": false,
                "height": 854,
                "width": 474,
                "scrubber_media_url": "https://v.redd.it/vpmfq4l4inef1/DASH_96.mp4",
                "dash_url": "https://v.redd.it/vpmfq4l4inef1/DASHPlaylist.mpd?a=1755911588%2CMWIwYmFiMzg1NTg0ZTU3NTRiN2YwYTJiYjZmN2EwYTUzYmFhZjI5NjhlMDBlMzcwNDM3YmQ4NWEyMGNkOWRlZg%3D%3D&amp;v=1&amp;f=sd",
                "duration": 59,
                "hls_url": "https://v.redd.it/vpmfq4l4inef1/HLSPlaylist.m3u8?a=1755911588%2CM2QzOWM3NGMwNDM3M2U5NWM2NTE1MTc2NDAxMGIyZjBiYmRiZjk3NTM3N2JkZjgwNWE1NmIxMWQyNmZkN2E1Zg%3D%3D&amp;v=1&amp;f=sd",
                "is_gif": false,
                "transcoding_status": "completed"
              }
            },
            "is_reddit_media_domain": true,
            "is_meta": false,
            "category": null,
            "secure_media_embed": {},
            "link_flair_text": "Tutorial | Guide",
            "can_mod_post": false,
            "score": 8,
            "approved_by": null,
            "is_created_from_ads_ui": false,
            "author_premium": false,
            "thumbnail": "https://external-preview.redd.it/Yzk5aTg1bDRpbmVmMY9-A8ZAgOuotV2CW7jB1Psa5aqFVRjz1XH6fQIZp4yz.png?width=140&amp;height=140&amp;crop=140:140,smart&amp;format=jpg&amp;v=enabled&amp;lthumb=true&amp;s=c8000c14077f1fc5c9905924cdff668fd3dc40a1",
            "edited": false,
            "author_flair_css_class": null,
            "author_flair_richtext": [],
            "gildings": {},
            "post_hint": "hosted:video",
            "content_categories": null,
            "is_self": false,
            "subreddit_type": "public",
            "created": 1753288696,
            "link_flair_type": "richtext",
            "wls": 6,
            "removed_by_category": null,
            "banned_by": null,
            "author_flair_type": "text",
            "domain": "v.redd.it",
            "allow_live_comments": false,
            "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;h2&gt;Preface&lt;/h2&gt;\n\n&lt;blockquote&gt;\n&lt;p&gt;The video is sped up; it actually takes about 20-30 minutes&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Github Repository: &lt;a href=\"https://github.com/wrtnlabs/autobe\"&gt;https://github.com/wrtnlabs/autobe&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;Generation Result: &lt;a href=\"https://github.com/wrtnlabs/autobe-example-bbs\"&gt;https://github.com/wrtnlabs/autobe-example-bbs&lt;/a&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;We are honored to introduce &lt;a href=\"https://github.com/wrtnlabs/autobe\"&gt;&lt;code&gt;AutoBE&lt;/code&gt;&lt;/a&gt; to you. &lt;a href=\"https://github.com/wrtnlabs/autobe\"&gt;&lt;code&gt;AutoBE&lt;/code&gt;&lt;/a&gt; is an open-source project developed by Wrtn Technologies (Korean AI startup company), a vibe coding agent that automatically generates backend applications.&lt;/p&gt;\n\n&lt;p&gt;One of &lt;a href=\"https://github.com/wrtnlabs/autobe\"&gt;&lt;code&gt;AutoBE&lt;/code&gt;&lt;/a&gt;&amp;#39;s key features is that it always generates code with 100% compilation success. The secret lies in our proprietary compiler system. Through our self-developed compilers, we support AI in generating type-safe code, and when AI generates incorrect code, the compiler detects it and provides detailed feedback, guiding the AI to generate correct code.&lt;/p&gt;\n\n&lt;p&gt;Through this approach, &lt;a href=\"https://github.com/wrtnlabs/autobe\"&gt;&lt;code&gt;AutoBE&lt;/code&gt;&lt;/a&gt; always generates backend applications with 100% compilation success. When AI constructs AST (Abstract Syntax Tree) data through function calling, our proprietary compiler validates it, provides feedback, and ultimately generates complete source code.&lt;/p&gt;\n\n&lt;h2&gt;Prisma DB Schema Compiler&lt;/h2&gt;\n\n&lt;p&gt;A compiler for database design.&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Compiler Structures\n\n&lt;ul&gt;\n&lt;li&gt;&lt;a href=\"https://github.com/wrtnlabs/autobe/blob/main/packages/interface/src/prisma/AutoBePrisma.ts\"&gt;&lt;code&gt;AutoBePrisma.IFile&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=\"https://github.com/wrtnlabs/autobe/blob/main/packages/interface/src/prisma/IAutoBePrismaValidation.ts\"&gt;&lt;code&gt;IAutoBePrismaValidation&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=\"https://github.com/samchon/openapi/blob/master/src/structures/IValidation.ts\"&gt;&lt;code&gt;IValidation&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;\n&lt;/ul&gt;&lt;/li&gt;\n&lt;li&gt;Generation Result\n\n&lt;ul&gt;\n&lt;li&gt;Prisma Schema Files: &lt;a href=\"https://github.com/wrtnlabs/autobe-example-bbs/tree/main/prisma/schema\"&gt;https://github.com/wrtnlabs/autobe-example-bbs/tree/main/prisma/schema&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;ERD Documentation: &lt;a href=\"https://github.com/wrtnlabs/autobe-example-bbs/blob/main/docs/ERD.md\"&gt;https://github.com/wrtnlabs/autobe-example-bbs/blob/main/docs/ERD.md&lt;/a&gt;&lt;/li&gt;\n&lt;/ul&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;&lt;a href=\"https://github.com/wrtnlabs/autobe\"&gt;&lt;code&gt;AutoBE&lt;/code&gt;&lt;/a&gt; utilizes a self-developed DB compiler when designing databases.&lt;/p&gt;\n\n&lt;p&gt;First, it creates an AST (Abstract Syntax Tree) structure called &lt;code&gt;AutoBePrisma.IFile&lt;/code&gt; through AI function calling (or structured output). Then it analyzes the data created by the AI to check for logical or type errors.&lt;/p&gt;\n\n&lt;p&gt;If logical errors are found, these are returned to the AI in the form of &lt;code&gt;IAutoBePrismaValidation&lt;/code&gt; with detailed reasons, guiding the AI to generate correct &lt;code&gt;AutoBePrisma.IFile&lt;/code&gt; data in the next function calling. Major logical error cases include:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;strong&gt;Duplication errors&lt;/strong&gt;: Duplicate definitions of filenames, model names, field names&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Circular references&lt;/strong&gt;: Cross-dependencies where two models reference each other as foreign keys&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Non-existent references&lt;/strong&gt;: Cases where foreign keys point to non-existent target models&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Index configuration errors&lt;/strong&gt;: Creating indexes on non-existent fields, duplicate index definitions&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Data type mismatches&lt;/strong&gt;: Applying GIN indexes to non-string fields&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Field names identical to table names&lt;/strong&gt;: Potential confusion due to normalization errors&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;If type errors are found, these are also returned to the AI in the form of &lt;code&gt;IValidation&lt;/code&gt;, guiding the AI to generate data with correct types.&lt;/p&gt;\n\n&lt;p&gt;Finally, when &lt;code&gt;AutoBePrisma.IFile&lt;/code&gt; is correctly generated without any logical or type errors, it is converted to Prisma DB schema (code generation). Simultaneously, ERD (Entity Relationship Diagram) and documentation are also generated (&lt;a href=\"https://github.com/samchon/prisma-markdown\"&gt;&lt;code&gt;prisma-markdown&lt;/code&gt;&lt;/a&gt;), helping users understand their DB design.&lt;/p&gt;\n\n&lt;p&gt;The generated Prisma schema files include detailed descriptive comments for each table and field. These comments go beyond simple code documentation - they are directly utilized by &lt;code&gt;prisma-markdown&lt;/code&gt; when generating ERDs and documentation, becoming core content of the database design documents. Therefore, developers can clearly understand the role of each table and field not only at the code level but also through visual ERD diagrams.&lt;/p&gt;\n\n&lt;h2&gt;OpenAPI Document Compiler&lt;/h2&gt;\n\n&lt;p&gt;A compiler for API interface design.&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Compiler Structures\n\n&lt;ul&gt;\n&lt;li&gt;&lt;a href=\"https://github.com/wrtnlabs/autobe/blob/main/packages/interface/src/openapi/AutoBeOpenApi.ts\"&gt;&lt;code&gt;AutoBeOpenApi.IDocument&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=\"https://github.com/samchon/openapi/blob/master/src/structures/IValidation.ts\"&gt;&lt;code&gt;IValidation&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;\n&lt;/ul&gt;&lt;/li&gt;\n&lt;li&gt;Generation Result: &lt;a href=\"https://stackblitz.com/edit/njkqikge\"&gt;https://stackblitz.com/edit/njkqikge&lt;/a&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;&lt;a href=\"https://github.com/wrtnlabs/autobe\"&gt;&lt;code&gt;AutoBE&lt;/code&gt;&lt;/a&gt; utilizes a self-developed OpenAPI compiler when designing API interfaces.&lt;/p&gt;\n\n&lt;p&gt;This OpenAPI compiler first has an AST (Abstract Syntax Tree) structure of type &lt;code&gt;AutoBeOpenApi.IDocument&lt;/code&gt;, which is created through AI function calling. Then it analyzes this data, and if logical or type errors are found, detailed reasons are returned to the AI, guiding the AI to generate correct &lt;code&gt;AutoBeOpenApi.IDocument&lt;/code&gt; data.&lt;/p&gt;\n\n&lt;p&gt;After the AI successfully generates a flawless &lt;code&gt;AutoBeOpenApi.IDocument&lt;/code&gt;, &lt;a href=\"https://github.com/wrtnlabs/autobe\"&gt;&lt;code&gt;AutoBE&lt;/code&gt;&lt;/a&gt; converts it to the official OpenAPI v3.1 spec &lt;a href=\"https://github.com/samchon/openapi/blob/master/src/OpenApi.ts\"&gt;&lt;code&gt;OpenApi.IDocument&lt;/code&gt;&lt;/a&gt; structure. This is then further converted to TypeScript/NestJS source code (code generation), completing the API interface implementation.&lt;/p&gt;\n\n&lt;p&gt;The generated TypeScript/NestJS source code consists of API controller classes and DTO (Data Transfer Object) types, where each API controller method is a mock method that only generates random values of the specified return type using the &lt;a href=\"https://typia.io/docs/random\"&gt;&lt;code&gt;typia.random&amp;lt;T&amp;gt;()&lt;/code&gt;&lt;/a&gt; function. Therefore, APIs generated by &lt;a href=\"https://github.com/wrtnlabs/autobe\"&gt;&lt;code&gt;AutoBE&lt;/code&gt;&lt;/a&gt; don&amp;#39;t actually function, but they complete the foundational work for API interface design and implementation.&lt;/p&gt;\n\n&lt;p&gt;All generated controller functions and DTO types include detailed JSDoc comments. The purpose of each API endpoint, parameter descriptions, and meanings of return values are clearly documented, making it easy for developers to understand the purpose and usage of APIs.&lt;/p&gt;\n\n&lt;h2&gt;E2E Test Function Compiler&lt;/h2&gt;\n\n&lt;p&gt;A compiler for generating E2E test programs.&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Compiler Structures\n\n&lt;ul&gt;\n&lt;li&gt;&lt;a href=\"https://github.com/wrtnlabs/autobe/blob/main/packages/interface/src/test/AutoBeTest.ts\"&gt;&lt;code&gt;AutoBeTest.IFunction&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=\"https://github.com/wrtnlabs/autobe/blob/main/packages/interface/src/compiler/IAutoBeTypeScriptCompileResult.ts\"&gt;&lt;code&gt;IAutoBeTypeScriptCompileResult&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=\"https://github.com/samchon/openapi/blob/master/src/structures/IValidation.ts\"&gt;&lt;code&gt;IValidation&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;\n&lt;/ul&gt;&lt;/li&gt;\n&lt;li&gt;Prompt Structures\n\n&lt;ul&gt;\n&lt;li&gt;&lt;a href=\"https://github.com/wrtnlabs/autobe/blob/main/packages/agent/src/orchestrate/test/structures/IAutoBeTestWriteApplication.ts#L4\"&gt;&lt;code&gt;IAutoBeTestWriteApplication&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=\"https://github.com/wrtnlabs/autobe/blob/main/packages/agent/src/orchestrate/test/structures/IAutoBeTestCorrectApplication.ts\"&gt;&lt;code&gt;IAutoBeTestCorrectApplication&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;\n&lt;/ul&gt;&lt;/li&gt;\n&lt;li&gt;Generation Result: &lt;a href=\"https://github.com/wrtnlabs/autobe-example-bbs\"&gt;https://github.com/wrtnlabs/autobe-example-bbs&lt;/a&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;&lt;a href=\"https://github.com/wrtnlabs/autobe\"&gt;&lt;code&gt;AutoBE&lt;/code&gt;&lt;/a&gt; uses a self-developed compiler when generating E2E test code.&lt;/p&gt;\n\n&lt;p&gt;This E2E test compiler has an AST (Abstract Syntax Tree) structure called &lt;code&gt;AutoBeTest.IFunction&lt;/code&gt;, which is constructed through AI function calling. Then it analyzes this data, and if logical or type errors are found, detailed reasons are returned to the AI, guiding the AI to generate correct &lt;code&gt;AutoBeTest.IFunction&lt;/code&gt; data.&lt;/p&gt;\n\n&lt;p&gt;After the AI successfully generates flawless &lt;code&gt;AutoBeTest.IFunction&lt;/code&gt; data, &lt;a href=\"https://github.com/wrtnlabs/autobe\"&gt;&lt;code&gt;AutoBE&lt;/code&gt;&lt;/a&gt; converts it to TypeScript source code (code generation). The Test agent then combines each of the generated e2e test functions with the code generated by the interface agent to complete a new backend application.&lt;/p&gt;\n\n&lt;p&gt;When E2E test functions call backend server API functions, they use an SDK (Software Development Kit) generated for the backend server API to ensure type-safe API function calls.&lt;/p&gt;\n\n&lt;p&gt;Each generated E2E test function includes detailed comments describing the test&amp;#39;s scenario and purpose. Which APIs are called in what order, what is verified at each step, and what results are expected are clearly documented, making it easy to understand the intent of the test code.&lt;/p&gt;\n\n&lt;h2&gt;Detailed Article&lt;/h2&gt;\n\n&lt;p&gt;&lt;a href=\"http://wrtnlabs.io/autobe/articles/autobe-ai-friendly-compilers.html\"&gt;http://wrtnlabs.io/autobe/articles/autobe-ai-friendly-compilers.html&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;Since Reddit doesn&amp;#39;t allow posting YouTube videos, diagrams, and image materials, I&amp;#39;ve written a detailed article separately on blog.&lt;/p&gt;\n\n&lt;p&gt;For those who are curious about the details, please refer to the link above.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
            "likes": null,
            "suggested_sort": null,
            "banned_at_utc": null,
            "url_overridden_by_dest": "https://v.redd.it/vpmfq4l4inef1",
            "view_count": null,
            "archived": false,
            "no_follow": false,
            "is_crosspostable": false,
            "pinned": false,
            "over_18": false,
            "preview": {
              "images": [
                {
                  "source": {
                    "url": "https://external-preview.redd.it/Yzk5aTg1bDRpbmVmMY9-A8ZAgOuotV2CW7jB1Psa5aqFVRjz1XH6fQIZp4yz.png?format=pjpg&amp;auto=webp&amp;s=ec9f6f6ac2518a4956c8aae11dea6e6d1306ebcd",
                    "width": 600,
                    "height": 1080
                  },
                  "resolutions": [
                    {
                      "url": "https://external-preview.redd.it/Yzk5aTg1bDRpbmVmMY9-A8ZAgOuotV2CW7jB1Psa5aqFVRjz1XH6fQIZp4yz.png?width=108&amp;crop=smart&amp;format=pjpg&amp;auto=webp&amp;s=365d16f2ecbeb325c356467cd7e12742194a1fda",
                      "width": 108,
                      "height": 194
                    },
                    {
                      "url": "https://external-preview.redd.it/Yzk5aTg1bDRpbmVmMY9-A8ZAgOuotV2CW7jB1Psa5aqFVRjz1XH6fQIZp4yz.png?width=216&amp;crop=smart&amp;format=pjpg&amp;auto=webp&amp;s=ca4638dbe8c303b4dcd404fcf675dd7e53abd26f",
                      "width": 216,
                      "height": 388
                    },
                    {
                      "url": "https://external-preview.redd.it/Yzk5aTg1bDRpbmVmMY9-A8ZAgOuotV2CW7jB1Psa5aqFVRjz1XH6fQIZp4yz.png?width=320&amp;crop=smart&amp;format=pjpg&amp;auto=webp&amp;s=25e5f999182a968a690f6d093c35f22bec26ded3",
                      "width": 320,
                      "height": 576
                    }
                  ],
                  "variants": {},
                  "id": "Yzk5aTg1bDRpbmVmMY9-A8ZAgOuotV2CW7jB1Psa5aqFVRjz1XH6fQIZp4yz"
                }
              ],
              "enabled": false
            },
            "all_awardings": [],
            "awarders": [],
            "media_only": false,
            "link_flair_template_id": "449b05a6-bf8e-11ed-b4bd-66961e47bd50",
            "can_gild": false,
            "spoiler": false,
            "locked": false,
            "author_flair_text": null,
            "treatment_tags": [],
            "visited": false,
            "removed_by": null,
            "mod_note": null,
            "distinguished": null,
            "subreddit_id": "t5_81eyvm",
            "author_is_blocked": false,
            "mod_reason_by": null,
            "num_reports": null,
            "removal_reason": null,
            "link_flair_background_color": "#0079d3",
            "id": "1m7e5uc",
            "is_robot_indexable": true,
            "num_duplicates": 0,
            "report_reasons": null,
            "author": "jhnam88",
            "discussion_type": null,
            "num_comments": 2,
            "send_replies": true,
            "media": {
              "reddit_video": {
                "bitrate_kbps": 1200,
                "fallback_url": "https://v.redd.it/vpmfq4l4inef1/DASH_480.mp4?source=fallback",
                "has_audio": false,
                "height": 854,
                "width": 474,
                "scrubber_media_url": "https://v.redd.it/vpmfq4l4inef1/DASH_96.mp4",
                "dash_url": "https://v.redd.it/vpmfq4l4inef1/DASHPlaylist.mpd?a=1755911588%2CMWIwYmFiMzg1NTg0ZTU3NTRiN2YwYTJiYjZmN2EwYTUzYmFhZjI5NjhlMDBlMzcwNDM3YmQ4NWEyMGNkOWRlZg%3D%3D&amp;v=1&amp;f=sd",
                "duration": 59,
                "hls_url": "https://v.redd.it/vpmfq4l4inef1/HLSPlaylist.m3u8?a=1755911588%2CM2QzOWM3NGMwNDM3M2U5NWM2NTE1MTc2NDAxMGIyZjBiYmRiZjk3NTM3N2JkZjgwNWE1NmIxMWQyNmZkN2E1Zg%3D%3D&amp;v=1&amp;f=sd",
                "is_gif": false,
                "transcoding_status": "completed"
              }
            },
            "contest_mode": false,
            "author_patreon_flair": false,
            "author_flair_text_color": null,
            "permalink": "/r/LocalLLaMA/comments/1m7e5uc/autobe_were_making_aifriendly_compilers_for_vibe/",
            "stickied": false,
            "url": "https://v.redd.it/vpmfq4l4inef1",
            "subreddit_subscribers": 503518,
            "created_utc": 1753288696,
            "num_crossposts": 0,
            "mod_reports": [],
            "is_video": true
          }
        }
      ],
      "before": null
    }
  },
  {
    "kind": "Listing",
    "data": {
      "after": null,
      "dist": null,
      "modhash": "",
      "geo_filter": "",
      "children": [
        {
          "kind": "t1",
          "data": {
            "subreddit_id": "t5_81eyvm",
            "approved_at_utc": null,
            "author_is_blocked": false,
            "comment_type": null,
            "awarders": [],
            "mod_reason_by": null,
            "banned_by": null,
            "author_flair_type": "text",
            "total_awards_received": 0,
            "subreddit": "LocalLLaMA",
            "author_flair_template_id": null,
            "likes": null,
            "replies": {
              "kind": "Listing",
              "data": {
                "after": null,
                "dist": null,
                "modhash": "",
                "geo_filter": "",
                "children": [
                  {
                    "kind": "t1",
                    "data": {
                      "subreddit_id": "t5_81eyvm",
                      "approved_at_utc": null,
                      "author_is_blocked": false,
                      "comment_type": null,
                      "awarders": [],
                      "mod_reason_by": null,
                      "banned_by": null,
                      "author_flair_type": "text",
                      "total_awards_received": 0,
                      "subreddit": "LocalLLaMA",
                      "author_flair_template_id": null,
                      "likes": null,
                      "replies": "",
                      "user_reports": [],
                      "saved": false,
                      "id": "n4th3q4",
                      "banned_at_utc": null,
                      "mod_reason_title": null,
                      "gilded": 0,
                      "archived": false,
                      "collapsed_reason_code": null,
                      "no_follow": true,
                      "author": "jhnam88",
                      "can_mod_post": false,
                      "created_utc": 1753318683,
                      "send_replies": true,
                      "parent_id": "t1_n4r7erq",
                      "score": 1,
                      "author_fullname": "t2_1njlywuqe6",
                      "removal_reason": null,
                      "approved_by": null,
                      "mod_note": null,
                      "all_awardings": [],
                      "body": "I've often seen compilation errors when using code assistant tools.\n\n\n\nIf you know a compiler like us or know of a tool that gives feedback about compile errors, please let me know so I can learn more about it.",
                      "edited": false,
                      "top_awarded_type": null,
                      "author_flair_css_class": null,
                      "name": "t1_n4th3q4",
                      "is_submitter": true,
                      "downs": 0,
                      "author_flair_richtext": [],
                      "author_patreon_flair": false,
                      "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I&amp;#39;ve often seen compilation errors when using code assistant tools.&lt;/p&gt;\n\n&lt;p&gt;If you know a compiler like us or know of a tool that gives feedback about compile errors, please let me know so I can learn more about it.&lt;/p&gt;\n&lt;/div&gt;",
                      "gildings": {},
                      "collapsed_reason": null,
                      "distinguished": null,
                      "associated_award": null,
                      "stickied": false,
                      "author_premium": false,
                      "can_gild": false,
                      "link_id": "t3_1m7e5uc",
                      "unrepliable_reason": null,
                      "author_flair_text_color": null,
                      "score_hidden": false,
                      "permalink": "/r/LocalLLaMA/comments/1m7e5uc/autobe_were_making_aifriendly_compilers_for_vibe/n4th3q4/",
                      "subreddit_type": "public",
                      "locked": false,
                      "report_reasons": null,
                      "created": 1753318683,
                      "author_flair_text": null,
                      "treatment_tags": [],
                      "collapsed": false,
                      "subreddit_name_prefixed": "r/LocalLLaMA",
                      "controversiality": 0,
                      "depth": 1,
                      "author_flair_background_color": null,
                      "collapsed_because_crowd_control": null,
                      "mod_reports": [],
                      "num_reports": null,
                      "ups": 1
                    }
                  }
                ],
                "before": null
              }
            },
            "user_reports": [],
            "saved": false,
            "id": "n4r7erq",
            "banned_at_utc": null,
            "mod_reason_title": null,
            "gilded": 0,
            "archived": false,
            "collapsed_reason_code": null,
            "no_follow": true,
            "author": "Final_Wheel_7486",
            "can_mod_post": false,
            "created_utc": 1753293939,
            "send_replies": true,
            "parent_id": "t3_1m7e5uc",
            "score": 1,
            "author_fullname": "t2_cyrs5dhp",
            "approved_by": null,
            "mod_note": null,
            "all_awardings": [],
            "collapsed": false,
            "body": "Sounds interesting! One question:\n\n\n&gt; One of AutoBE's key features is that it always generates code with 100% compilation success. The secret lies in our proprietary compiler system. Through our self-developed compilers, we support AI in generating type-safe code, and when AI generates incorrect code, the compiler detects it and provides detailed feedback, guiding the AI to generate correct code.\n\n\nIsn't that \"key feature\" exactly what most modern IDEs already do when using agentic coding? Like, don't they always pipe command output back into the model's feedback loop?",
            "edited": false,
            "top_awarded_type": null,
            "author_flair_css_class": null,
            "name": "t1_n4r7erq",
            "is_submitter": false,
            "downs": 0,
            "author_flair_richtext": [],
            "author_patreon_flair": false,
            "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Sounds interesting! One question:&lt;/p&gt;\n\n&lt;blockquote&gt;\n&lt;p&gt;One of AutoBE&amp;#39;s key features is that it always generates code with 100% compilation success. The secret lies in our proprietary compiler system. Through our self-developed compilers, we support AI in generating type-safe code, and when AI generates incorrect code, the compiler detects it and provides detailed feedback, guiding the AI to generate correct code.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;Isn&amp;#39;t that &amp;quot;key feature&amp;quot; exactly what most modern IDEs already do when using agentic coding? Like, don&amp;#39;t they always pipe command output back into the model&amp;#39;s feedback loop?&lt;/p&gt;\n&lt;/div&gt;",
            "removal_reason": null,
            "collapsed_reason": null,
            "distinguished": null,
            "associated_award": null,
            "stickied": false,
            "author_premium": false,
            "can_gild": false,
            "gildings": {},
            "unrepliable_reason": null,
            "author_flair_text_color": null,
            "score_hidden": false,
            "permalink": "/r/LocalLLaMA/comments/1m7e5uc/autobe_were_making_aifriendly_compilers_for_vibe/n4r7erq/",
            "subreddit_type": "public",
            "locked": false,
            "report_reasons": null,
            "created": 1753293939,
            "author_flair_text": null,
            "treatment_tags": [],
            "link_id": "t3_1m7e5uc",
            "subreddit_name_prefixed": "r/LocalLLaMA",
            "controversiality": 0,
            "depth": 0,
            "author_flair_background_color": null,
            "collapsed_because_crowd_control": null,
            "mod_reports": [],
            "num_reports": null,
            "ups": 1
          }
        }
      ],
      "before": null
    }
  }
]
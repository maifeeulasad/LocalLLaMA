[
  {
    "kind": "Listing",
    "data": {
      "after": null,
      "dist": 1,
      "modhash": "",
      "geo_filter": "",
      "children": [
        {
          "kind": "t3",
          "data": {
            "approved_at_utc": null,
            "subreddit": "LocalLLaMA",
            "selftext": "Hello I am QLORA finetuning a Llama instruct model but when I am creating the dataset via its chat template applied, it prints \"Cutting Knowledge Date: December 2023\\\\nToday Date: 26 Jul 2024\" into my data at everyline in the json file. Should I be removing/cleaning them? Do they harm the attention mechanism by making the model to focus on these or do they create noise? \n\nAlso when I look at the chat template via this code,\n\n    from transformers import AutoTokenizer\n    tokenizer = AutoTokenizer.from_pretrained(\"meta-llama/Llama-3.1-8B-Instruct\")\n    print(tokenizer.chat_template)\n\n&gt;It prints out these:  \n{{- bos\\_token }}\n\n&gt;{%- if custom\\_tools is defined %}\n\n&gt;{%- set tools = custom\\_tools %}\n\n&gt;{%- endif %}\n\n&gt;{%- if not tools\\_in\\_user\\_message is defined %}\n\n&gt;{%- set tools\\_in\\_user\\_message = true %}\n\n&gt;{%- endif %}\n\n&gt;{%- if not date\\_string is defined %}\n\n&gt;{%- set date\\_string = \"26 Jul 2024\" %}\n\n&gt;{%- endif %}\n\n&gt;{%- if not tools is defined %}\n\n&gt;{%- set tools = none %}\n\n&gt;{%- endif %}\n\n&gt;\n\n&gt;{#- This block extracts the system message, so we can slot it into the right place. #}\n\n&gt;{%- if messages\\[0\\]\\['role'\\] == 'system' %}\n\n&gt;{%- set system\\_message = messages\\[0\\]\\['content'\\]|trim %}\n\n&gt;{%- set messages = messages\\[1:\\] %}\n\n&gt;{%- else %}\n\n&gt;{%- set system\\_message = \"\" %}\n\n&gt;{%- endif %}\n\n&gt;\n\n&gt;{#- System message + builtin tools #}\n\n&gt;{{- \"&lt;|start\\_header\\_id|&gt;system&lt;|end\\_header\\_id|&gt;\\\\n\\\\n\" }}\n\n&gt;{%- if builtin\\_tools is defined or tools is not none %}\n\n&gt;{{- \"Environment: ipython\\\\n\" }}\n\n&gt;{%- endif %}\n\n&gt;{%- if builtin\\_tools is defined %}\n\n&gt;{{- \"Tools: \" + builtin\\_tools | reject('equalto', 'code\\_interpreter') | join(\", \") + \"\\\\n\\\\n\"}}\n\n&gt;{%- endif %}\n\n&gt;{{- \"Cutting Knowledge Date: December 2023\\\\n\" }}\n\n&gt;{{- \"Today Date: \" + date\\_string + \"\\\\n\\\\n\" }}\n\n&gt;{%- if tools is not none and not tools\\_in\\_user\\_message %}\n\n&gt;{{- \"You have access to the following functions. To call a function, please respond with JSON for a function call.\" }}\n\n&gt;{{- 'Respond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.' }}\n\n&gt;{{- \"Do not use variables.\\\\n\\\\n\" }}\n\n&gt;{%- for t in tools %}\n\n&gt;{{- t | tojson(indent=4) }}\n\n&gt;{{- \"\\\\n\\\\n\" }}\n\n&gt;{%- endfor %}\n\n&gt;{%- endif %}\n\n&gt;{{- system\\_message }}\n\n&gt;{{- \"&lt;|eot\\_id|&gt;\" }}\n\n&gt;\n\n&gt;{#- Custom tools are passed in a user message with some extra guidance #}\n\n&gt;{%- if tools\\_in\\_user\\_message and not tools is none %}\n\n&gt;{#- Extract the first user message so we can plug it in here #}\n\n&gt;{%- if messages | length != 0 %}\n\n&gt;{%- set first\\_user\\_message = messages\\[0\\]\\['content'\\]|trim %}\n\n&gt;{%- set messages = messages\\[1:\\] %}\n\n&gt;{%- else %}\n\n&gt;{{- raise\\_exception(\"Cannot put tools in the first user message when there's no first user message!\") }}\n\n&gt;{%- endif %}\n\n&gt;{{- '&lt;|start\\_header\\_id|&gt;user&lt;|end\\_header\\_id|&gt;\\\\n\\\\n' -}}\n\n&gt;{{- \"Given the following functions, please respond with a JSON for a function call \" }}\n\n&gt;{{- \"with its proper arguments that best answers the given prompt.\\\\n\\\\n\" }}\n\n&gt;{{- 'Respond in the format {\"name\": function name, \"parameters\": dictionary of argument name and its value}.' }}\n\n&gt;{{- \"Do not use variables.\\\\n\\\\n\" }}\n\n&gt;{%- for t in tools %}\n\n&gt;{{- t | tojson(indent=4) }}\n\n&gt;{{- \"\\\\n\\\\n\" }}\n\n&gt;{%- endfor %}\n\n&gt;{{- first\\_user\\_message + \"&lt;|eot\\_id|&gt;\"}}\n\n&gt;{%- endif %}\n\n&gt;\n\n&gt;{%- for message in messages %}\n\n&gt;{%- if not (message.role == 'ipython' or message.role == 'tool' or 'tool\\_calls' in message) %}\n\n&gt;{{- '&lt;|start\\_header\\_id|&gt;' + message\\['role'\\] + '&lt;|end\\_header\\_id|&gt;\\\\n\\\\n'+ message\\['content'\\] | trim + '&lt;|eot\\_id|&gt;' }}\n\n&gt;{%- elif 'tool\\_calls' in message %}\n\n&gt;{%- if not message.tool\\_calls|length == 1 %}\n\n&gt;{{- raise\\_exception(\"This model only supports single tool-calls at once!\") }}\n\n&gt;{%- endif %}\n\n&gt;{%- set tool\\_call = message.tool\\_calls\\[0\\].function %}\n\n&gt;{%- if builtin\\_tools is defined and tool\\_call.name in builtin\\_tools %}\n\n&gt;{{- '&lt;|start\\_header\\_id|&gt;assistant&lt;|end\\_header\\_id|&gt;\\\\n\\\\n' -}}\n\n&gt;{{- \"&lt;|python\\_tag|&gt;\" + tool\\_call.name + \".call(\" }}\n\n&gt;{%- for arg\\_name, arg\\_val in tool\\_call.arguments | items %}\n\n&gt;{{- arg\\_name + '=\"' + arg\\_val + '\"' }}\n\n&gt;{%- if not loop.last %}\n\n&gt;{{- \", \" }}\n\n&gt;{%- endif %}\n\n&gt;{%- endfor %}\n\n&gt;{{- \")\" }}\n\n&gt;{%- else  %}\n\n&gt;{{- '&lt;|start\\_header\\_id|&gt;assistant&lt;|end\\_header\\_id|&gt;\\\\n\\\\n' -}}\n\n&gt;{{- '{\"name\": \"' + tool\\_call.name + '\", ' }}\n\n&gt;{{- '\"parameters\": ' }}\n\n&gt;{{- tool\\_call.arguments | tojson }}\n\n&gt;{{- \"}\" }}\n\n&gt;{%- endif %}\n\n&gt;{%- if builtin\\_tools is defined %}\n\n&gt;{#- This means we're in ipython mode #}\n\n&gt;{{- \"&lt;|eom\\_id|&gt;\" }}\n\n&gt;{%- else %}\n\n&gt;{{- \"&lt;|eot\\_id|&gt;\" }}\n\n&gt;{%- endif %}\n\n&gt;{%- elif message.role == \"tool\" or message.role == \"ipython\" %}\n\n&gt;{{- \"&lt;|start\\_header\\_id|&gt;ipython&lt;|end\\_header\\_id|&gt;\\\\n\\\\n\" }}\n\n&gt;{%- if message.content is mapping or message.content is iterable %}\n\n&gt;{{- message.content | tojson }}\n\n&gt;{%- else %}\n\n&gt;{{- message.content }}\n\n&gt;{%- endif %}\n\n&gt;{{- \"&lt;|eot\\_id|&gt;\" }}\n\n&gt;{%- endif %}\n\n&gt;{%- endfor %}\n\n&gt;{%- if add\\_generation\\_prompt %}\n\n&gt;{{- '&lt;|start\\_header\\_id|&gt;assistant&lt;|end\\_header\\_id|&gt;\\\\n\\\\n' }}\n\n&gt;{%- endif %}\n\n",
            "user_reports": [],
            "saved": false,
            "mod_reason_title": null,
            "gilded": 0,
            "clicked": false,
            "title": "Should I remove these?",
            "link_flair_richtext": [
              {
                "e": "text",
                "t": "Question | Help"
              }
            ],
            "subreddit_name_prefixed": "r/LocalLLaMA",
            "hidden": false,
            "pwls": 6,
            "link_flair_css_class": "",
            "downs": 0,
            "thumbnail_height": null,
            "top_awarded_type": null,
            "hide_score": true,
            "name": "t3_1ltonwy",
            "quarantine": false,
            "link_flair_text_color": "dark",
            "upvote_ratio": 0.5,
            "author_flair_background_color": null,
            "subreddit_type": "public",
            "ups": 0,
            "total_awards_received": 0,
            "media_embed": {},
            "thumbnail_width": null,
            "author_flair_template_id": null,
            "is_original_content": false,
            "author_fullname": "t2_acj9kgc6",
            "secure_media": null,
            "is_reddit_media_domain": false,
            "is_meta": false,
            "category": null,
            "secure_media_embed": {},
            "link_flair_text": "Question | Help",
            "can_mod_post": false,
            "score": 0,
            "approved_by": null,
            "is_created_from_ads_ui": false,
            "author_premium": false,
            "thumbnail": "self",
            "edited": false,
            "author_flair_css_class": null,
            "author_flair_richtext": [],
            "gildings": {},
            "content_categories": null,
            "is_self": true,
            "mod_note": null,
            "created": 1751876303,
            "link_flair_type": "richtext",
            "wls": 6,
            "removed_by_category": null,
            "banned_by": null,
            "author_flair_type": "text",
            "domain": "self.LocalLLaMA",
            "allow_live_comments": false,
            "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Hello I am QLORA finetuning a Llama instruct model but when I am creating the dataset via its chat template applied, it prints &amp;quot;Cutting Knowledge Date: December 2023\\nToday Date: 26 Jul 2024&amp;quot; into my data at everyline in the json file. Should I be removing/cleaning them? Do they harm the attention mechanism by making the model to focus on these or do they create noise? &lt;/p&gt;\n\n&lt;p&gt;Also when I look at the chat template via this code,&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;from transformers import AutoTokenizer\ntokenizer = AutoTokenizer.from_pretrained(&amp;quot;meta-llama/Llama-3.1-8B-Instruct&amp;quot;)\nprint(tokenizer.chat_template)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;blockquote&gt;\n&lt;p&gt;It prints out these:&lt;br/&gt;\n{{- bos_token }}&lt;/p&gt;\n\n&lt;p&gt;{%- if custom_tools is defined %}&lt;/p&gt;\n\n&lt;p&gt;{%- set tools = custom_tools %}&lt;/p&gt;\n\n&lt;p&gt;{%- endif %}&lt;/p&gt;\n\n&lt;p&gt;{%- if not tools_in_user_message is defined %}&lt;/p&gt;\n\n&lt;p&gt;{%- set tools_in_user_message = true %}&lt;/p&gt;\n\n&lt;p&gt;{%- endif %}&lt;/p&gt;\n\n&lt;p&gt;{%- if not date_string is defined %}&lt;/p&gt;\n\n&lt;p&gt;{%- set date_string = &amp;quot;26 Jul 2024&amp;quot; %}&lt;/p&gt;\n\n&lt;p&gt;{%- endif %}&lt;/p&gt;\n\n&lt;p&gt;{%- if not tools is defined %}&lt;/p&gt;\n\n&lt;p&gt;{%- set tools = none %}&lt;/p&gt;\n\n&lt;p&gt;{%- endif %}&lt;/p&gt;\n\n&lt;p&gt;{#- This block extracts the system message, so we can slot it into the right place. #}&lt;/p&gt;\n\n&lt;p&gt;{%- if messages[0][&amp;#39;role&amp;#39;] == &amp;#39;system&amp;#39; %}&lt;/p&gt;\n\n&lt;p&gt;{%- set system_message = messages[0][&amp;#39;content&amp;#39;]|trim %}&lt;/p&gt;\n\n&lt;p&gt;{%- set messages = messages[1:] %}&lt;/p&gt;\n\n&lt;p&gt;{%- else %}&lt;/p&gt;\n\n&lt;p&gt;{%- set system_message = &amp;quot;&amp;quot; %}&lt;/p&gt;\n\n&lt;p&gt;{%- endif %}&lt;/p&gt;\n\n&lt;p&gt;{#- System message + builtin tools #}&lt;/p&gt;\n\n&lt;p&gt;{{- &amp;quot;&amp;lt;|start_header_id|&amp;gt;system&amp;lt;|end_header_id|&amp;gt;\\n\\n&amp;quot; }}&lt;/p&gt;\n\n&lt;p&gt;{%- if builtin_tools is defined or tools is not none %}&lt;/p&gt;\n\n&lt;p&gt;{{- &amp;quot;Environment: ipython\\n&amp;quot; }}&lt;/p&gt;\n\n&lt;p&gt;{%- endif %}&lt;/p&gt;\n\n&lt;p&gt;{%- if builtin_tools is defined %}&lt;/p&gt;\n\n&lt;p&gt;{{- &amp;quot;Tools: &amp;quot; + builtin_tools | reject(&amp;#39;equalto&amp;#39;, &amp;#39;code_interpreter&amp;#39;) | join(&amp;quot;, &amp;quot;) + &amp;quot;\\n\\n&amp;quot;}}&lt;/p&gt;\n\n&lt;p&gt;{%- endif %}&lt;/p&gt;\n\n&lt;p&gt;{{- &amp;quot;Cutting Knowledge Date: December 2023\\n&amp;quot; }}&lt;/p&gt;\n\n&lt;p&gt;{{- &amp;quot;Today Date: &amp;quot; + date_string + &amp;quot;\\n\\n&amp;quot; }}&lt;/p&gt;\n\n&lt;p&gt;{%- if tools is not none and not tools_in_user_message %}&lt;/p&gt;\n\n&lt;p&gt;{{- &amp;quot;You have access to the following functions. To call a function, please respond with JSON for a function call.&amp;quot; }}&lt;/p&gt;\n\n&lt;p&gt;{{- &amp;#39;Respond in the format {&amp;quot;name&amp;quot;: function name, &amp;quot;parameters&amp;quot;: dictionary of argument name and its value}.&amp;#39; }}&lt;/p&gt;\n\n&lt;p&gt;{{- &amp;quot;Do not use variables.\\n\\n&amp;quot; }}&lt;/p&gt;\n\n&lt;p&gt;{%- for t in tools %}&lt;/p&gt;\n\n&lt;p&gt;{{- t | tojson(indent=4) }}&lt;/p&gt;\n\n&lt;p&gt;{{- &amp;quot;\\n\\n&amp;quot; }}&lt;/p&gt;\n\n&lt;p&gt;{%- endfor %}&lt;/p&gt;\n\n&lt;p&gt;{%- endif %}&lt;/p&gt;\n\n&lt;p&gt;{{- system_message }}&lt;/p&gt;\n\n&lt;p&gt;{{- &amp;quot;&amp;lt;|eot_id|&amp;gt;&amp;quot; }}&lt;/p&gt;\n\n&lt;p&gt;{#- Custom tools are passed in a user message with some extra guidance #}&lt;/p&gt;\n\n&lt;p&gt;{%- if tools_in_user_message and not tools is none %}&lt;/p&gt;\n\n&lt;p&gt;{#- Extract the first user message so we can plug it in here #}&lt;/p&gt;\n\n&lt;p&gt;{%- if messages | length != 0 %}&lt;/p&gt;\n\n&lt;p&gt;{%- set first_user_message = messages[0][&amp;#39;content&amp;#39;]|trim %}&lt;/p&gt;\n\n&lt;p&gt;{%- set messages = messages[1:] %}&lt;/p&gt;\n\n&lt;p&gt;{%- else %}&lt;/p&gt;\n\n&lt;p&gt;{{- raise_exception(&amp;quot;Cannot put tools in the first user message when there&amp;#39;s no first user message!&amp;quot;) }}&lt;/p&gt;\n\n&lt;p&gt;{%- endif %}&lt;/p&gt;\n\n&lt;p&gt;{{- &amp;#39;&amp;lt;|start_header_id|&amp;gt;user&amp;lt;|end_header_id|&amp;gt;\\n\\n&amp;#39; -}}&lt;/p&gt;\n\n&lt;p&gt;{{- &amp;quot;Given the following functions, please respond with a JSON for a function call &amp;quot; }}&lt;/p&gt;\n\n&lt;p&gt;{{- &amp;quot;with its proper arguments that best answers the given prompt.\\n\\n&amp;quot; }}&lt;/p&gt;\n\n&lt;p&gt;{{- &amp;#39;Respond in the format {&amp;quot;name&amp;quot;: function name, &amp;quot;parameters&amp;quot;: dictionary of argument name and its value}.&amp;#39; }}&lt;/p&gt;\n\n&lt;p&gt;{{- &amp;quot;Do not use variables.\\n\\n&amp;quot; }}&lt;/p&gt;\n\n&lt;p&gt;{%- for t in tools %}&lt;/p&gt;\n\n&lt;p&gt;{{- t | tojson(indent=4) }}&lt;/p&gt;\n\n&lt;p&gt;{{- &amp;quot;\\n\\n&amp;quot; }}&lt;/p&gt;\n\n&lt;p&gt;{%- endfor %}&lt;/p&gt;\n\n&lt;p&gt;{{- first_user_message + &amp;quot;&amp;lt;|eot_id|&amp;gt;&amp;quot;}}&lt;/p&gt;\n\n&lt;p&gt;{%- endif %}&lt;/p&gt;\n\n&lt;p&gt;{%- for message in messages %}&lt;/p&gt;\n\n&lt;p&gt;{%- if not (message.role == &amp;#39;ipython&amp;#39; or message.role == &amp;#39;tool&amp;#39; or &amp;#39;tool_calls&amp;#39; in message) %}&lt;/p&gt;\n\n&lt;p&gt;{{- &amp;#39;&amp;lt;|start_header_id|&amp;gt;&amp;#39; + message[&amp;#39;role&amp;#39;] + &amp;#39;&amp;lt;|end_header_id|&amp;gt;\\n\\n&amp;#39;+ message[&amp;#39;content&amp;#39;] | trim + &amp;#39;&amp;lt;|eot_id|&amp;gt;&amp;#39; }}&lt;/p&gt;\n\n&lt;p&gt;{%- elif &amp;#39;tool_calls&amp;#39; in message %}&lt;/p&gt;\n\n&lt;p&gt;{%- if not message.tool_calls|length == 1 %}&lt;/p&gt;\n\n&lt;p&gt;{{- raise_exception(&amp;quot;This model only supports single tool-calls at once!&amp;quot;) }}&lt;/p&gt;\n\n&lt;p&gt;{%- endif %}&lt;/p&gt;\n\n&lt;p&gt;{%- set tool_call = message.tool_calls[0].function %}&lt;/p&gt;\n\n&lt;p&gt;{%- if builtin_tools is defined and tool_call.name in builtin_tools %}&lt;/p&gt;\n\n&lt;p&gt;{{- &amp;#39;&amp;lt;|start_header_id|&amp;gt;assistant&amp;lt;|end_header_id|&amp;gt;\\n\\n&amp;#39; -}}&lt;/p&gt;\n\n&lt;p&gt;{{- &amp;quot;&amp;lt;|python_tag|&amp;gt;&amp;quot; + tool_call.name + &amp;quot;.call(&amp;quot; }}&lt;/p&gt;\n\n&lt;p&gt;{%- for arg_name, arg_val in tool_call.arguments | items %}&lt;/p&gt;\n\n&lt;p&gt;{{- arg_name + &amp;#39;=&amp;quot;&amp;#39; + arg_val + &amp;#39;&amp;quot;&amp;#39; }}&lt;/p&gt;\n\n&lt;p&gt;{%- if not loop.last %}&lt;/p&gt;\n\n&lt;p&gt;{{- &amp;quot;, &amp;quot; }}&lt;/p&gt;\n\n&lt;p&gt;{%- endif %}&lt;/p&gt;\n\n&lt;p&gt;{%- endfor %}&lt;/p&gt;\n\n&lt;p&gt;{{- &amp;quot;)&amp;quot; }}&lt;/p&gt;\n\n&lt;p&gt;{%- else  %}&lt;/p&gt;\n\n&lt;p&gt;{{- &amp;#39;&amp;lt;|start_header_id|&amp;gt;assistant&amp;lt;|end_header_id|&amp;gt;\\n\\n&amp;#39; -}}&lt;/p&gt;\n\n&lt;p&gt;{{- &amp;#39;{&amp;quot;name&amp;quot;: &amp;quot;&amp;#39; + tool_call.name + &amp;#39;&amp;quot;, &amp;#39; }}&lt;/p&gt;\n\n&lt;p&gt;{{- &amp;#39;&amp;quot;parameters&amp;quot;: &amp;#39; }}&lt;/p&gt;\n\n&lt;p&gt;{{- tool_call.arguments | tojson }}&lt;/p&gt;\n\n&lt;p&gt;{{- &amp;quot;}&amp;quot; }}&lt;/p&gt;\n\n&lt;p&gt;{%- endif %}&lt;/p&gt;\n\n&lt;p&gt;{%- if builtin_tools is defined %}&lt;/p&gt;\n\n&lt;p&gt;{#- This means we&amp;#39;re in ipython mode #}&lt;/p&gt;\n\n&lt;p&gt;{{- &amp;quot;&amp;lt;|eom_id|&amp;gt;&amp;quot; }}&lt;/p&gt;\n\n&lt;p&gt;{%- else %}&lt;/p&gt;\n\n&lt;p&gt;{{- &amp;quot;&amp;lt;|eot_id|&amp;gt;&amp;quot; }}&lt;/p&gt;\n\n&lt;p&gt;{%- endif %}&lt;/p&gt;\n\n&lt;p&gt;{%- elif message.role == &amp;quot;tool&amp;quot; or message.role == &amp;quot;ipython&amp;quot; %}&lt;/p&gt;\n\n&lt;p&gt;{{- &amp;quot;&amp;lt;|start_header_id|&amp;gt;ipython&amp;lt;|end_header_id|&amp;gt;\\n\\n&amp;quot; }}&lt;/p&gt;\n\n&lt;p&gt;{%- if message.content is mapping or message.content is iterable %}&lt;/p&gt;\n\n&lt;p&gt;{{- message.content | tojson }}&lt;/p&gt;\n\n&lt;p&gt;{%- else %}&lt;/p&gt;\n\n&lt;p&gt;{{- message.content }}&lt;/p&gt;\n\n&lt;p&gt;{%- endif %}&lt;/p&gt;\n\n&lt;p&gt;{{- &amp;quot;&amp;lt;|eot_id|&amp;gt;&amp;quot; }}&lt;/p&gt;\n\n&lt;p&gt;{%- endif %}&lt;/p&gt;\n\n&lt;p&gt;{%- endfor %}&lt;/p&gt;\n\n&lt;p&gt;{%- if add_generation_prompt %}&lt;/p&gt;\n\n&lt;p&gt;{{- &amp;#39;&amp;lt;|start_header_id|&amp;gt;assistant&amp;lt;|end_header_id|&amp;gt;\\n\\n&amp;#39; }}&lt;/p&gt;\n\n&lt;p&gt;{%- endif %}&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
            "likes": null,
            "suggested_sort": null,
            "banned_at_utc": null,
            "view_count": null,
            "archived": false,
            "no_follow": true,
            "is_crosspostable": false,
            "pinned": false,
            "over_18": false,
            "all_awardings": [],
            "awarders": [],
            "media_only": false,
            "link_flair_template_id": "2c9831e6-bf92-11ed-98e6-d2b8bcc02ae1",
            "can_gild": false,
            "spoiler": false,
            "locked": false,
            "author_flair_text": null,
            "treatment_tags": [],
            "visited": false,
            "removed_by": null,
            "num_reports": null,
            "distinguished": null,
            "subreddit_id": "t5_81eyvm",
            "author_is_blocked": false,
            "mod_reason_by": null,
            "removal_reason": null,
            "link_flair_background_color": "#5a74cc",
            "id": "1ltonwy",
            "is_robot_indexable": true,
            "num_duplicates": 0,
            "report_reasons": null,
            "author": "Opening_Cash_4532",
            "discussion_type": null,
            "num_comments": 0,
            "send_replies": true,
            "media": null,
            "contest_mode": false,
            "author_patreon_flair": false,
            "author_flair_text_color": null,
            "permalink": "/r/LocalLLaMA/comments/1ltonwy/should_i_remove_these/",
            "stickied": false,
            "url": "https://www.reddit.com/r/LocalLLaMA/comments/1ltonwy/should_i_remove_these/",
            "subreddit_subscribers": 495395,
            "created_utc": 1751876303,
            "num_crossposts": 0,
            "mod_reports": [],
            "is_video": false
          }
        }
      ],
      "before": null
    }
  },
  {
    "kind": "Listing",
    "data": {
      "after": null,
      "dist": null,
      "modhash": "",
      "geo_filter": "",
      "children": [],
      "before": null
    }
  }
]
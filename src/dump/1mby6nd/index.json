[
  {
    "kind": "Listing",
    "data": {
      "after": null,
      "dist": 1,
      "modhash": "",
      "geo_filter": "",
      "children": [
        {
          "kind": "t3",
          "data": {
            "approved_at_utc": null,
            "subreddit": "LocalLLaMA",
            "selftext": "I’m working on a local AI agent and wanted to move beyond hand-crafted prompts by optimizing them automatically. I initially looked into soft prompt tuning, but since I’m using quantized models (Qwen3-4B/8B Q8_0) through ollama and llama.cpp on a 3050 laptop GPU, I can’t access gradients directly from the model.\n\nThat’s when I found PEZ (Hard Prompts Made Easy), which stood out as a clever workaround. It works by:\n- Optimizing prompts in the continuous embedding space\n- Projecting them back to discrete tokens\n- Using the standard loss function for supervision\n- Applying gradients to improve the continuous embeddings\n\nThis ultimately gives you discreet text prompts that can be used with any inference engine—no model modification or access to internal embeddings needed.\n- Paper: https://arxiv.org/abs/2302.03668\n- Code: https://github.com/YuxinWenRick/hard-prompts-made-easy\n\nHas anyone else experimented with PEZ, or other learned hard prompt optimization methods that work well with local models and quantized inference?\n\nTo be clear:\n- I’m not looking for DSPy-style systems\n- I’m aiming for lightweight methods that are compatible with local inference setups\n- Bonus if it works with quantized models or can train prompts on top of them offline\n\nWould love to hear what others are using to optimize agent behavior without resorting to full model fine-tuning or even LoRA.",
            "user_reports": [],
            "saved": false,
            "mod_reason_title": null,
            "gilded": 0,
            "clicked": false,
            "title": "Has anyone used PEZ or similar learned hard prompt methods for local LLMs?",
            "link_flair_richtext": [
              {
                "e": "text",
                "t": "Discussion"
              }
            ],
            "subreddit_name_prefixed": "r/LocalLLaMA",
            "hidden": false,
            "pwls": 6,
            "link_flair_css_class": "",
            "downs": 0,
            "thumbnail_height": null,
            "top_awarded_type": null,
            "hide_score": true,
            "name": "t3_1mby6nd",
            "quarantine": false,
            "link_flair_text_color": "light",
            "upvote_ratio": 1,
            "author_flair_background_color": null,
            "subreddit_type": "public",
            "ups": 1,
            "total_awards_received": 0,
            "media_embed": {},
            "thumbnail_width": null,
            "author_flair_template_id": null,
            "is_original_content": false,
            "author_fullname": "t2_s31fjsz6p",
            "secure_media": null,
            "is_reddit_media_domain": false,
            "is_meta": false,
            "category": null,
            "secure_media_embed": {},
            "link_flair_text": "Discussion",
            "can_mod_post": false,
            "score": 1,
            "approved_by": null,
            "is_created_from_ads_ui": false,
            "author_premium": false,
            "thumbnail": "self",
            "edited": false,
            "author_flair_css_class": null,
            "author_flair_richtext": [],
            "gildings": {},
            "content_categories": null,
            "is_self": true,
            "mod_note": null,
            "created": 1753751656,
            "link_flair_type": "richtext",
            "wls": 6,
            "removed_by_category": null,
            "banned_by": null,
            "author_flair_type": "text",
            "domain": "self.LocalLLaMA",
            "allow_live_comments": false,
            "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;I’m working on a local AI agent and wanted to move beyond hand-crafted prompts by optimizing them automatically. I initially looked into soft prompt tuning, but since I’m using quantized models (Qwen3-4B/8B Q8_0) through ollama and llama.cpp on a 3050 laptop GPU, I can’t access gradients directly from the model.&lt;/p&gt;\n\n&lt;p&gt;That’s when I found PEZ (Hard Prompts Made Easy), which stood out as a clever workaround. It works by:\n- Optimizing prompts in the continuous embedding space\n- Projecting them back to discrete tokens\n- Using the standard loss function for supervision\n- Applying gradients to improve the continuous embeddings&lt;/p&gt;\n\n&lt;p&gt;This ultimately gives you discreet text prompts that can be used with any inference engine—no model modification or access to internal embeddings needed.\n- Paper: &lt;a href=\"https://arxiv.org/abs/2302.03668\"&gt;https://arxiv.org/abs/2302.03668&lt;/a&gt;\n- Code: &lt;a href=\"https://github.com/YuxinWenRick/hard-prompts-made-easy\"&gt;https://github.com/YuxinWenRick/hard-prompts-made-easy&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;Has anyone else experimented with PEZ, or other learned hard prompt optimization methods that work well with local models and quantized inference?&lt;/p&gt;\n\n&lt;p&gt;To be clear:\n- I’m not looking for DSPy-style systems\n- I’m aiming for lightweight methods that are compatible with local inference setups\n- Bonus if it works with quantized models or can train prompts on top of them offline&lt;/p&gt;\n\n&lt;p&gt;Would love to hear what others are using to optimize agent behavior without resorting to full model fine-tuning or even LoRA.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
            "likes": null,
            "suggested_sort": null,
            "banned_at_utc": null,
            "view_count": null,
            "archived": false,
            "no_follow": true,
            "is_crosspostable": false,
            "pinned": false,
            "over_18": false,
            "all_awardings": [],
            "awarders": [],
            "media_only": false,
            "link_flair_template_id": "5f921ea4-c7bc-11ed-9c23-3a00622979b4",
            "can_gild": false,
            "spoiler": false,
            "locked": false,
            "author_flair_text": null,
            "treatment_tags": [],
            "visited": false,
            "removed_by": null,
            "num_reports": null,
            "distinguished": null,
            "subreddit_id": "t5_81eyvm",
            "author_is_blocked": false,
            "mod_reason_by": null,
            "removal_reason": null,
            "link_flair_background_color": "#646d73",
            "id": "1mby6nd",
            "is_robot_indexable": true,
            "num_duplicates": 0,
            "report_reasons": null,
            "author": "HadesTerminal",
            "discussion_type": null,
            "num_comments": 0,
            "send_replies": true,
            "media": null,
            "contest_mode": false,
            "author_patreon_flair": false,
            "author_flair_text_color": null,
            "permalink": "/r/LocalLLaMA/comments/1mby6nd/has_anyone_used_pez_or_similar_learned_hard/",
            "stickied": false,
            "url": "https://www.reddit.com/r/LocalLLaMA/comments/1mby6nd/has_anyone_used_pez_or_similar_learned_hard/",
            "subreddit_subscribers": 506190,
            "created_utc": 1753751656,
            "num_crossposts": 0,
            "mod_reports": [],
            "is_video": false
          }
        }
      ],
      "before": null
    }
  },
  {
    "kind": "Listing",
    "data": {
      "after": null,
      "dist": null,
      "modhash": "",
      "geo_filter": "",
      "children": [],
      "before": null
    }
  }
]